<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2022-06-04T15:01:48+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Every Single Day</title><subtitle></subtitle><author><name>Dajeong Park</name></author><entry><title type="html">Java method</title><link href="http://localhost:4000/wiki/2022/05/20/java-method.html" rel="alternate" type="text/html" title="Java method" /><published>2022-05-20T00:00:00+09:00</published><updated>2022-05-20T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2022/05/20/java-method</id><content type="html" xml:base="http://localhost:4000/wiki/2022/05/20/java-method.html"><![CDATA[<h3 id="charatint-index">charAt(int index)</h3>
<ul>
  <li>문자열의 index 위치에 있는 글자를 char 타입으로 리턴한다.</li>
  <li>index는 0부터 시작한다.</li>
  <li>마지막 문자의 index는 문자열 길이 -1이다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Hello World"</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span> <span class="c1">// H</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span> <span class="c1">// d</span>
</code></pre></div></div>
<p><br /></p>

<hr />

<h3 id="문자열에서-특정-문자-개수-세기">문자열에서 특정 문자 개수 세기</h3>
<h4 id="1-반복문">1. 반복문</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">count</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="2-replace">2. replace()</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">count</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">str</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">c</span><span class="o">),</span> <span class="s">""</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<hr />

<h3 id="소수점-n번째-자리까지-반올림">소수점 n번째 자리까지 반올림</h3>
<h4 id="1-mathround">1. Math.round()</h4>
<ul>
  <li>실수의 소수점 첫번째 자리를 반올림하여 정수로 리턴한다.</li>
  <li>그 이상의 자리를 나타내고 싶다면 100.0 등을 곱해서 사용할 수 있다.</li>
  <li>참고
    <ol>
      <li>Math.ceil(): 올림</li>
      <li>Math.floor(): 버림</li>
    </ol>
  </li>
</ul>

<h4 id="2-stringformat">2. String.format()</h4>
<ul>
  <li>String 클래스의 format 메소드는 리턴되는 문자열 형태를 지정할 수 있어 Math.round 메소드처럼 소수점 n번째 자리까지 반올림하여 나타낼 수 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">pie</span> <span class="o">=</span> <span class="mf">3.14159265358979</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%.2f"</span><span class="o">,</span> <span class="n">pie</span><span class="o">));</span> <span class="c1">// 3.14</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%.3f"</span><span class="o">,</span> <span class="n">pie</span><span class="o">));</span> <span class="c1">// 3.142</span>
</code></pre></div></div>

<h4 id="3-mathround와-stringformat">3. Math.round()와 String.format()</h4>
<ul>
  <li>두 메소드는 실수를 소수점 n번째까지 잘라서 나타낸다는 공통점이 있다.</li>
  <li>그러나 Math.round()는 소수점 아래가 0일 경우 절삭하지만, String.format()은 절삭하지 않고 그대로 리턴한다는 차이점이 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">money</span> <span class="o">=</span> <span class="mf">10000.000</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">money</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">);</span> <span class="c1">// 10000</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%.3f"</span><span class="o">,</span> <span class="n">money</span><span class="o">));</span> <span class="c1">// 10000.000</span>
</code></pre></div></div>
<p><br /></p>

<hr />
<h4 id="참고">참고</h4>
<ul>
  <li>https://coding-factory.tistory.com/250</li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><summary type="html"><![CDATA[charAt(int index) 문자열의 index 위치에 있는 글자를 char 타입으로 리턴한다. index는 0부터 시작한다. 마지막 문자의 index는 문자열 길이 -1이다.]]></summary></entry><entry><title type="html">Entity, VO 그리고 DTO</title><link href="http://localhost:4000/wiki/2022/05/17/entity,vo,dto.html" rel="alternate" type="text/html" title="Entity, VO 그리고 DTO" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2022/05/17/entity,vo,dto</id><content type="html" xml:base="http://localhost:4000/wiki/2022/05/17/entity,vo,dto.html"><![CDATA[<p>현재 회사에서는 Mybatis에 VO를 사용하고 있고, 개인적으로 프로젝트에서는 JPA에 entity를 사용한 적이 있는데 정확하게 entity, vo 그리고 dto에는 무슨 차이가 있는지 궁금해졌다.
김영한님의 강의와 최근 보기 시작한 스프링 부트와 AWS로 혼자 구현하는 웹 서비스 책을 보면서 entity는 테이블과 매핑되기 때문에 최대한 수정하지 말고, 데이터를 주고 받을 때는 dto를 사용하는 것이라고 이해했다.
실제로도 코드를 작성하다보니 entity를 계속 변경해서 다른 클래스까지 계속 수정하는 것보다 dto 클래스만 수정하는 게 유지보수 방면에서도 좋다는 걸 느꼈다.</p>

<h3 id="entity">Entity</h3>
<p>Entity는 데이터베이스의 테이블과 매핑되는 가장 핵심적인 객체로 식별자를 가진다는 특징이 있다.</p>

<h3 id="vovalue-object">VO(Value Object)</h3>
<p>VO는 값 자체를 표현하는 객체로, Entity와 달리 식별자를 가지지 않기 때문에 단 하나의 데이터라도 변경하게 되면 다른 객체가 되기 때문에 일반적으로 불변 객체로 사용한다.</p>

<h3 id="dtodata-transfer-object">DTO(Data Transfer Object)</h3>
<p>DTO는 말 그대로 데이터 교환을 위한 객체로, getter/setter를 사용할 수 있다.</p>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="MyBatis" /><summary type="html"><![CDATA[현재 회사에서는 Mybatis에 VO를 사용하고 있고, 개인적으로 프로젝트에서는 JPA에 entity를 사용한 적이 있는데 정확하게 entity, vo 그리고 dto에는 무슨 차이가 있는지 궁금해졌다. 김영한님의 강의와 최근 보기 시작한 스프링 부트와 AWS로 혼자 구현하는 웹 서비스 책을 보면서 entity는 테이블과 매핑되기 때문에 최대한 수정하지 말고, 데이터를 주고 받을 때는 dto를 사용하는 것이라고 이해했다. 실제로도 코드를 작성하다보니 entity를 계속 변경해서 다른 클래스까지 계속 수정하는 것보다 dto 클래스만 수정하는 게 유지보수 방면에서도 좋다는 걸 느꼈다.]]></summary></entry><entry><title type="html">MyBatis와 JPA</title><link href="http://localhost:4000/wiki/2022/05/15/mybatis-jpa.html" rel="alternate" type="text/html" title="MyBatis와 JPA" /><published>2022-05-15T00:00:00+09:00</published><updated>2022-05-15T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2022/05/15/mybatis-jpa</id><content type="html" xml:base="http://localhost:4000/wiki/2022/05/15/mybatis-jpa.html"><![CDATA[<p>먼저 MyBatis와 JPA를 알아보기 전에 알아두면 좋은 두 개념을 살펴보자.</p>
<h3 id="sql-mapper">SQL Mapper</h3>
<p>SQL Mapper는 직접 작성한 SQL에 해당되는 데이터를 읽고, 결과값을 객체화시켜 사용할 수 있게 해준다. SQL에 데이터베이스에 따라 SQL 문법이 다르므로 특정 RDB에 종속적이며, SQL에 의존적인 개발하게 된다.</p>
<ul>
  <li>예) MyBatis</li>
</ul>

<h3 id="ormobject-relational-mapping">ORM(Object-Relational Mapping)</h3>
<p>ORM은 객체는 객체대로 설계하고, 관계형 데이터베이스(RDB)는 관계형 데이터베이스대로 설계 후 ORM이 중간에서 매핑해주는 것을 의미한다. SQL이 아닌 관계형 데이터베이스에 데이터 자체를 매핑하기 때문에 SQL을 직접 작성할 필요가 없다.
이로 인해 특정 데이터베이스에 구애받지 않으며, 제공하는 메서드와 코드 또한 직관적이어서 사용하기 편리하다.</p>
<ul>
  <li>예) Hibernate, JPA 등</li>
</ul>

<p><br /></p>

<hr />
<h3 id="mybatisjava-persistence-framework">MyBatis(Java Persistence Framework)</h3>
<p>MyBatis는 SQL Mapper의 일종으로 개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 영속성 프레임워크다. MyBatis는 JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해주고, 데이터베이스 record에 원시 타입과 Map 그리고 Java POJO를 설정하여 매핑하기 위해 XML과 Annotation을 사용할 수 있다. 즉, SQL문을 직접 작성하여 객체와 매핑시켜준다.</p>

<h4 id="장점">장점</h4>
<ul>
  <li>SQL 쿼리를 직접 작성하므로 최적화된 쿼리를 구현할 수 있다.</li>
  <li>SQL의 세부적인 내용 변경이나 동적 쿼리 사용 시 JPA보다 간편하게 구현 가능하다.</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>쿼리를 직접 작성하기 때문에 데이터베이스 변경 시 수정할 부분이 굉장히 많아진다. (특정 데이터베이스에 종속적이다)</li>
  <li>런타임 시 에러를 발견할 수 있다.</li>
  <li>비슷한 코드를 반복적으로 작업하게 된다.</li>
</ul>

<p><br /></p>

<hr />
<h3 id="jpajava-persistence-api">JPA(Java Persistence API)</h3>
<p>JPA는 Java ORM의 기술 표준에 대한 API 표준 명세로, 객체와 데이터베이스의 패러다임 불일치로 인한 문제점을 해결하기 위해 등장했다. 개발자는 객체지향적인 개발을 하고, JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성해서 실행하기 때문에 SQL에 종속적인 개발이 아닌 객체 중심 개발을 할 수 있다.
JPA는 인터페이스이기 때문에, 구현체로는 Hibernate, EclipseLink, DataNucleus 등이 있다. Spring에서 JPA를 사용할 땐 이 구현체들을 직접 다루는게 아니라 좀 더 쉽게 사용하기 위해 추상화시킨 Spring Data JPA를 사용한다. 덕분에 관계형 데이터베이스 외에 다른 저장소로 쉽게 교체할 수 있다. (예: Spring Data JPA -&gt; Spring Data MongoDB)</p>

<h4 id="장점-1">장점</h4>
<ul>
  <li>객체 중심 개발을 하기 때문에 생산성이 향상되고, 유지보수 또한 편하다.</li>
  <li>컴파일 시에 에러를 발견할 수 있다.</li>
</ul>

<h4 id="단점-1">단점</h4>
<ul>
  <li>객체지향과 관계형 데이터베이스 둘 다 이해해야 하기 때문에 러닝 커브가 높다.</li>
</ul>

<p><br /></p>

<hr />
<h3 id="개인적인-의견">개인적인 의견</h3>
<p>요즘엔 QueryDsl 같은 조회용 프레임워크를 함께 사용하여 복잡한 연산도 깔끔하게 할 수 있다. 개인적으로 자바 개발자라면 한 번쯤 꼭 배워보는게 좋다고 생각하며, 언젠가는 꼭 실무에서 JPA를 사용해보고 싶다!</p>

<p><br /></p>

<hr />
<p><br /> 
<strong>참고</strong></p>
<ul>
  <li><a href="https://mybatis.org/mybatis-3/ko/index.html">https://mybatis.org/mybatis-3/ko/index.html</a></li>
  <li><a href="https://dreaming-soohyun.tistory.com/entry/JPA%EC%99%80-MyBatis%EC%9D%98-%EC%B0%A8%EC%9D%B4-ORM%EA%B3%BC-SQL-Mapper">https://dreaming-soohyun.tistory.com/entry/JPA%EC%99%80-MyBatis%EC%9D%98-%EC%B0%A8%EC%9D%B4-ORM%EA%B3%BC-SQL-Mapper</a></li>
  <li><a href="https://incheol-jung.gitbook.io/docs/q-and-a/spring/jpa-vs-mybatis">https://incheol-jung.gitbook.io/docs/q-and-a/spring/jpa-vs-mybatis</a></li>
  <li>이동욱님의 책 [스프링 부트와 AWS로 혼자 구현하는 웹 서비스]</li>
  <li>김영한님의 인프런 강의 [실전! 스프링 부트와 JPA 활용 시리즈] <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-%ED%99%9C%EC%9A%A9-1">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-%ED%99%9C%EC%9A%A9-1</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="MyBatis" /><category term="JPA" /><summary type="html"><![CDATA[먼저 MyBatis와 JPA를 알아보기 전에 알아두면 좋은 두 개념을 살펴보자. SQL Mapper SQL Mapper는 직접 작성한 SQL에 해당되는 데이터를 읽고, 결과값을 객체화시켜 사용할 수 있게 해준다. SQL에 데이터베이스에 따라 SQL 문법이 다르므로 특정 RDB에 종속적이며, SQL에 의존적인 개발하게 된다. 예) MyBatis]]></summary></entry><entry><title type="html">Fake it till you make it</title><link href="http://localhost:4000/blog/2022/05/14/promise.html" rel="alternate" type="text/html" title="Fake it till you make it" /><published>2022-05-14T00:00:00+09:00</published><updated>2022-05-14T00:00:00+09:00</updated><id>http://localhost:4000/blog/2022/05/14/promise</id><content type="html" xml:base="http://localhost:4000/blog/2022/05/14/promise.html"><![CDATA[<h3 id="블로그를-시작한-이유">블로그를 시작한 이유</h3>
<p>공부할 때도 업무할 때도 기록해야 어느 정도 기억하는 편인데 노션은 너무 막 쓰기도 하고, 다른 분들과 공유하면서 발전하고 싶어서 블로그를 시작하게 되었다. 이제서야 시작한 게 조금 부끄럽지만 그만큼 더 열심히 해볼 예정이다.</p>

<h3 id="스스로의-다짐">스스로의 다짐</h3>
<p>항상 마음은 있었지만 게으른 완벽주의 때문에 시작하기가 너무 힘들었지만 제대로 만들었으니까 가벼운 글이나 깊게 파보고 싶었던 부분을 가감없이 올려보자!</p>

<h3 id="얻어가고-싶은-것">얻어가고 싶은 것</h3>
<ul>
  <li>md 파일 작성 방법 익히기</li>
  <li>스스로 질문하고 깊게 생각하는 습관</li>
</ul>

<h3 id="규칙">규칙</h3>
<ul>
  <li>나 자신에게 솔직하기 (모르는 것을 부끄러워 하지 말자)</li>
  <li>최소한 일주일 한 개씩 글 올리기 (짧아도 좋다)</li>
</ul>

<h3 id="깊게-공부할-부분">깊게 공부할 부분</h3>
<ul>
  <li>Java</li>
  <li>Spring</li>
  <li>자료구조 및 알고리즘</li>
  <li>네트워크</li>
  <li>서버 (AWS, GCP)</li>
  <li>데이터베이스</li>
</ul>

<h3 id="계속-기록할-부분">계속 기록할 부분</h3>
<ul>
  <li>자주 쓰는 git</li>
  <li>Shell Script</li>
  <li>에러</li>
  <li>한 달에 한 번 회고</li>
</ul>

<p><br />
<br />
공부 겸 위키용 블로그니까 틀린 부분이 있으면 언제든지 말씀해주세요~!</p>]]></content><author><name>Dajeong Park</name></author><category term="blog" /><category term="다짐" /><summary type="html"><![CDATA[블로그를 시작한 이유 공부할 때도 업무할 때도 기록해야 어느 정도 기억하는 편인데 노션은 너무 막 쓰기도 하고, 다른 분들과 공유하면서 발전하고 싶어서 블로그를 시작하게 되었다. 이제서야 시작한 게 조금 부끄럽지만 그만큼 더 열심히 해볼 예정이다.]]></summary></entry></feed>