<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2025-02-28T21:41:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Every Single Day</title><subtitle></subtitle><author><name>Dajeong Park</name></author><entry><title type="html">JPA Auditing으로 엔티티 변경 이력 관리하기</title><link href="http://localhost:4000/wiki/2025/02/28/jpa-auditing.html" rel="alternate" type="text/html" title="JPA Auditing으로 엔티티 변경 이력 관리하기" /><published>2025-02-28T00:00:00+09:00</published><updated>2025-02-28T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2025/02/28/jpa-auditing</id><content type="html" xml:base="http://localhost:4000/wiki/2025/02/28/jpa-auditing.html"><![CDATA[<p>Spring Data JPA에서는 기본적으로 제공해주는 기능 중 편리한 기능들이 많은데, 그중 내게 충격을 주었던 기능이 바로 Auditing이었다. 
MyBatis에서는 일일이 설정하거나 지정해줘야 했던 부분이 기능으로 있다니.. 
오늘은 JPA Auditing에 대해서 자세히 알아보고, 아직 사용해보지 못한 AuditorAware 기능과 실무에서 겪었던 트러블 슈팅까지 추가해서 기록해두려고 한다.
<br />
<br />
<br /></p>

<h2 id="jpa-auditing">JPA Auditing</h2>
<p>Audit은 사전적으로 ‘감사하다’, ‘단속하다’라는 뜻을 가지고 있다. JPA에서는 Auditing을 제공하여 엔티티가 언제 혹은 누가 생성하거나 변경했는지를 자동으로 추적(단속)하는 기능을 제공한다.
Auditing을 사용하기 위해서는 엔티티 클래스에 Auditing 정보를 포함한 메타데이터를 추가하고, 어노테이션을 사용하거나 특정 인터페이스를 구현하여 정의할 수 있다.
<br />
<br />
<br /></p>

<h2 id="auditing-적용">Auditing 적용</h2>

<h3 id="applicationclass">Application.class</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableJpaAuditing</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">CaffeineApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p><strong><code class="language-plaintext highlighter-rouge">@EnableJpaAuditing</code></strong></p>
<ul>
  <li>JPA Auditing을 활성하기 위한 어노테이션으로, 이렇게 Application단의 main 메소드에 붙여주거나 Config 클래스를 따로 생성하여 설정해줄 수 있다.</li>
</ul>

<h3 id="basetimeentityclass">BaseTimeEntity.class</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MappedSuperclass</span>
<span class="nd">@EntityListeners</span><span class="o">(</span><span class="nc">AuditingEntityListener</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseDateTimeEntity</span> <span class="o">{</span>

    <span class="nd">@CreatedDate</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdDateTime</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">modifiedDateTime</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@MappedSuperclass</code></strong></p>
<ul>
  <li>JPA Entity 클래스들이 BaseTimeEntity 클래스를 상속할 경우 필드들(createdDateTime, modifiedDateTime)을 컬럼으로 인식하도록 한다.</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">@EntityListeners(AuditingEntityListener.class)</code></strong></p>
<ul>
  <li>BaseTimeEntity 클래스에 Auditing 기능을 포함시킨다.</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">@CreatedDate</code></strong></p>
<ul>
  <li>Entity가 생성되어 저장될 때 시간이 자동 저장된다.</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">@LastModifiedDate</code></strong></p>
<ul>
  <li>조회한 Entity의 값을 변경할 때 시간이 자동 저장된다.
<br /></li>
</ul>

<h3 id="-mappedsuperclass란"><strong>➕ @MappedSuperclass란?</strong></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Documented</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">MappedSuperclass</span>
</code></pre></div></div>
<ul>
  <li>MappedSuperclass는 상위 클래스로부터 매핑 정보를 상속 받는 클래스임을 지정하는 어노테이션이다.</li>
  <li>지정된 클래스 자체는 별도의 테이블이 생성되지 않는다. (== 상속하는 하위 클래스에만 적용된다.)</li>
  <li>하위 클래스에서는 상속된 매핑 정보가 해당 클래스의 테이블에 적용되고, <code class="language-plaintext highlighter-rouge">@AttributeOverride</code>, <code class="language-plaintext highlighter-rouge">@AssociationOverride</code> 애노테이션 (또는 XML)을 사용하면 매핑 정보를 재정의할 수도 있다.<br />
<br />
<br />
<br /></li>
</ul>

<h2 id="auditoraware">AuditorAware</h2>
<p>그렇다면 AuditorAware는 뭘까? 
아직 직접 써본 적 없지만 생성일, 수정일처럼 생성자, 수정자 같은 사용자 정보도 JPA Auditing을 통해 자동으로 입력해줄 수 있다.
생성일, 수정일과는 구현체를 설정하고 그 구현체를 JWT 같은 인증 토큰을 검사할 때 같이 넣어주면 된다.</p>

<h3 id="userauditawareclass">UserAuditAware.class</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAuditAware</span> <span class="kd">implements</span> <span class="nc">AuditorAware</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="nf">getCurrentAuditor</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authentication</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">authentication</span><span class="o">.</span><span class="na">isAuthenticated</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nc">CustomUserDetails</span> <span class="n">userDetails</span> <span class="o">=</span> <span class="o">(</span><span class="nc">CustomUserDetails</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">userDetails</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="applicationclass-1">Application.class</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableJpaAuditing</span><span class="o">(</span><span class="n">auditorAwareRef</span> <span class="o">=</span> <span class="s">"userAuditorAware"</span><span class="o">)</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">CaffeineApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위에서 설정해준 main 메서드에 구현해준 클래스의 빈 이름을 설정해주면 해당 클래스를 이용하여 사용자 정보를 자동으로 등록할 수 있게 된다.<br />
<br />
<br />
<br /></p>

<h2 id="트러블-슈팅-">트러블 슈팅 💫</h2>

<h3 id="어라-왜-update문의-결과를-확인하는데-createddatetime이-null로-업데이트-되지">어라 왜 update문의 결과를 확인하는데 createdDateTime이 null로 업데이트 되지❓🤔</h3>
<p>생성일 컬럼에 이름을 설정하기 위해 <code class="language-plaintext highlighter-rouge">@Column</code> 어노테이션을 붙였는데, <code class="language-plaintext highlighter-rouge">@Column</code>의 옵션 중 하나인 updatable의 기본값이 true라서 값을 설정해주지 않은 생성일 컬럼에 null이 업데이트된 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">({</span><span class="no">METHOD</span><span class="o">,</span> <span class="no">FIELD</span><span class="o">})</span> 
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Column</span> <span class="o">{</span>
	<span class="cm">/**
	* (Optional) Whether the column is included in SQL UPDATE 
	* statements generated by the persistence provider.
	*/</span>
	<span class="kt">boolean</span> <span class="nf">updatable</span><span class="o">()</span> <span class="k">default</span> <span class="o">**</span><span class="kc">true</span><span class="o">**;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그래서 <code class="language-plaintext highlighter-rouge">@Column</code>을 사용할 거라면 아래처럼 <strong>updatable</strong> 옵션을 <strong>false</strong>로 지정해주는 것이 필요하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CreatedDate</span>
<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"created_date_time"</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdDateTime</span><span class="o">;</span>
</code></pre></div></div>

<p>다시 생각해보니 <code class="language-plaintext highlighter-rouge">@Column</code> 어노테이션을 꼭 써야할까? 하는 의문이 들었다. 내가 <code class="language-plaintext highlighter-rouge">@Column</code>을 썼던 이유는 Java의 카멜케이스를 데이터베이스의 스네이크케이스와 연결시키고 싶어서였다. 
그런데 아래처럼 YML 파일에 설정하면 자동 연결이 된다니 💦 앞으로는 이런 설정 하나로 코드를 줄이기 위해 한번씩은 꼭 찾아보고 작업할 필요를 느꼈다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">spring:</span>
  <span class="nl">jpa:</span>
    <span class="nl">hibernate:</span>
      <span class="nl">naming:</span>
        <span class="n">physical</span><span class="o">-</span><span class="nl">strategy:</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">boot</span><span class="o">.</span><span class="na">model</span><span class="o">.</span><span class="na">naming</span><span class="o">.</span><span class="na">CamelCaseToUnderscoresNamingStrategy</span>
</code></pre></div></div>

<p>➕ 추가로 <code class="language-plaintext highlighter-rouge">@CreatedDate</code>/<code class="language-plaintext highlighter-rouge">@CreatedBy</code>는 기본적으로 엔티티가 처음 저장될 때 자동으로 값이 설정되지만, 직접 변경하거나 Native Query로는 수정 가능하기 때문에 <code class="language-plaintext highlighter-rouge">@Column(updatable = false)</code>을 설정하는 것이 안전하다.<br />
<br />
<br /></p>

<p><strong>참고</strong></p>
<ul>
  <li><a href="https://docs.spring.io/spring-data/jpa/reference/auditing.html">Spring 공식 문서</a></li>
  <li><a href="https://hudi.blog/spring-data-jpa-auditing-create-update-date/">https://hudi.blog/spring-data-jpa-auditing-create-update-date/</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="JPA" /><category term="Auditing" /><summary type="html"><![CDATA[Spring Data JPA에서는 기본적으로 제공해주는 기능 중 편리한 기능들이 많은데, 그중 내게 충격을 주었던 기능이 바로 Auditing이었다. MyBatis에서는 일일이 설정하거나 지정해줘야 했던 부분이 기능으로 있다니.. 오늘은 JPA Auditing에 대해서 자세히 알아보고, 아직 사용해보지 못한 AuditorAware 기능과 실무에서 겪었던 트러블 슈팅까지 추가해서 기록해두려고 한다.]]></summary></entry><entry><title type="html">Spring @Scheduled로 간단하게 원하는 시간에 스케줄을 등록해보자</title><link href="http://localhost:4000/wiki/2025/02/13/spring-scheduled-annotation.html" rel="alternate" type="text/html" title="Spring @Scheduled로 간단하게 원하는 시간에 스케줄을 등록해보자" /><published>2025-02-13T00:00:00+09:00</published><updated>2025-02-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2025/02/13/spring-scheduled-annotation</id><content type="html" xml:base="http://localhost:4000/wiki/2025/02/13/spring-scheduled-annotation.html"><![CDATA[<p>오늘은 실무에서 자주 사용하는 <code class="language-plaintext highlighter-rouge">@Scheduled</code>에 대해서 정리해두려고 한다. 이번 프로젝트에서도 어김없이 <code class="language-plaintext highlighter-rouge">@Scheduled</code>를 사용하게 되었는데, 마침 이번에 알게 된 부분까지 추가해서 <code class="language-plaintext highlighter-rouge">@Scheduled</code>를 사용하는 방법과 <code class="language-plaintext highlighter-rouge">@Scheduled</code>에서 원하는 시간에 스케줄러를 돌릴 때 사용할 수 있는 Cron식까지 알아보자.
<br />
<br /></p>

<h2 id="scheduled">@Scheduled</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Scheduled</code>는 Spring에서 제공하는 스케줄링 어노테이션으로, 특정 작업을 일정한 주기로 자동 실행할 수 있도록 도와준다.</li>
  <li>알림 전송, 배치 작업, 데이터 백업 등의 주기적인 작업을 수행해야 할 때 사용할 수 있다.
<br /></li>
</ul>

<h3 id="scheduled-설정">@Scheduled 설정</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableScheduling</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulerApplication</span> <span class="o">{</span> 
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>        
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>    
	<span class="o">}</span> 
<span class="o">}</span>

</code></pre></div></div>
<ul>
  <li>먼저 Application 클래스 main() 메소드에 <code class="language-plaintext highlighter-rouge">@EnableScheduling</code> 어노테이션을 설정해준다. (Config 클래스를 만들어서 지정하는 것도 가능하다.)
<br /></li>
</ul>

<h3 id="scheduled-사용법">@Scheduled 사용법</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulerService</span> <span class="o">{</span>
	<span class="nd">@Scheduled</span><span class="o">(</span><span class="n">fixedDelay</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">)</span> <span class="c1">// 1초마다 실행</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello Cron!"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>그러면 이제 메소드에는 <code class="language-plaintext highlighter-rouge">@Scheduled</code> 어노테이션을 붙여 바로 사용할 수 있는데, 주의해야 할 점은 <code class="language-plaintext highlighter-rouge">@Scheduled</code>를 사용할 클래스가 스프링 빈에 등록된 클래스여야 한다는 것이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Component</code>, <code class="language-plaintext highlighter-rouge">@Service</code> 등
<br /></li>
    </ul>
  </li>
</ul>

<h3 id="scheduled-메소드-규칙">@Scheduled 메소드 규칙</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Scheduled</code>를 사용하는 메소드는 아래 두 규칙을 지켜야 한다.
    <ol>
      <li>void 리턴 타입</li>
      <li>매개변수 사용 불가
<br />
<br /></li>
    </ol>
  </li>
</ul>

<h2 id="scheduled-속성">@Scheduled 속성</h2>

<h3 id="fixeddelay">fixedDelay</h3>
<ul>
  <li>이전 Task의 종료 시점부터 정의된 시간만큼 지난 후 Task 실행 (단위: milliseconds)</li>
  <li>(작업 수행 시간을 포함하여) <strong>작업을 마친 후부터</strong> 일정 주기마다 메소드 호출</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">fixedDelay</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">)</span> <span class="c1">// 5초마다 실행</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fixedDelaySchedule</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"FixedDelay Task = {}"</span><span class="o">,</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span> <span class="o">(</span><span class="mi">3</span><span class="n">초</span> <span class="n">걸림</span><span class="o">,</span> <span class="mi">5</span><span class="n">초</span> <span class="n">대기</span><span class="o">)</span>
<span class="mi">8</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span> <span class="o">(</span><span class="mi">3</span><span class="n">초</span> <span class="n">걸림</span><span class="o">,</span> <span class="mi">5</span><span class="n">초</span> <span class="n">대기</span><span class="o">)</span>
<span class="mi">13</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span>
</code></pre></div></div>

<h3 id="fixedrate">fixedRate</h3>
<ul>
  <li>이전 Task의 시작 시점으로부터 정의된 시간만큼 지난 후 Task 실행 (단위: milliseconds)</li>
  <li><strong>작업 수행시간과 상관없이</strong> 일정 주기마다 메소드 호출</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">fixedRate</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">)</span> <span class="c1">// 5초마다 실행</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fixedRateSchedule</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"FixedRate Task = {}"</span><span class="o">,</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span> <span class="o">(</span><span class="mi">3</span><span class="n">초</span> <span class="n">걸림</span><span class="o">)</span>
<span class="mi">5</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span> <span class="o">(</span><span class="mi">3</span><span class="n">초</span> <span class="n">걸림</span><span class="o">)</span>
<span class="mi">10</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span>
</code></pre></div></div>

<h3 id="initialdelay">initialDelay</h3>
<ul>
  <li>애플리케이션 시작 후 초기 지연시간 설정</li>
  <li>서버가 시작되자마자 실행되는 것을 방지</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">fixedRate</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">,</span> <span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">)</span> <span class="c1">// 5초마다 실행, 초기 10초 대기</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialDelaySchedule</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"InitialDelay Task = {}"</span><span class="o">,</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">앱</span> <span class="n">시작</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="n">초</span> <span class="n">대기</span>
<span class="mi">10</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span>
<span class="mi">15</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span>
<span class="mi">20</span><span class="n">초</span> <span class="o">-&gt;</span> <span class="n">실행</span>
</code></pre></div></div>
<p><br />
<br /></p>

<h2 id="cron">Cron</h2>
<ul>
  <li>일정한 주기가 아니라 특정 시간에 작업을 실행하고 싶다면 cron 속성에 Cron식을 사용하면 된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">cron</span> <span class="o">=</span> <span class="s">"0 0 10 * * *"</span><span class="o">)</span> <span class="c1">// 매일 오전 10시 실행</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">cronSchedule</span><span class="o">()</span> <span class="o">{</span>
	<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Cron Task = {}"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="순서">순서</h3>
<p>1.초(0-59)
2.분(0-59)
3.시간(0-23)
4.일(1-31)
5.월(1-12)
6.요일(0-6) (0:일, … 6: 토)</p>

<h3 id="표현">표현</h3>

<table>
  <thead>
    <tr>
      <th>표현</th>
      <th>설명</th>
      <th>예시</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>*</td>
      <td>모든 조건 (매시, 매일, 매주처럼 사용)</td>
      <td>0 0 18 * * * -&gt; 매일 18시</td>
    </tr>
    <tr>
      <td>?</td>
      <td>설정값 없음 (날짜, 요일에서만 사용 가능)</td>
      <td>0 0 14 10,20 * ? -&gt; 매달 10일, 20일 14시</td>
    </tr>
    <tr>
      <td>-</td>
      <td>범위 지정</td>
      <td>0 0/5 9-18 * * * -&gt; 매일 9시0분에서18시55분 사이에 5분 간격</td>
    </tr>
    <tr>
      <td>,</td>
      <td>여러 값 지정</td>
      <td>0 0 14 10,20 * ? -&gt; 매달 10일, 20일 14시</td>
    </tr>
    <tr>
      <td>/</td>
      <td>증분값, 즉 초기값과 증가치 설정에 사용</td>
      <td>0 0 0/1 * * * -&gt; 1시간마다</td>
    </tr>
    <tr>
      <td>L</td>
      <td>마지막 - 지정할 수 있는 범위의 마지막 값 설정 시 사용 (날짜, 요일에서만 사용 가능)</td>
      <td>0 30 10 ? * 6L -&gt; 매달 마지막 토요일 10시 30분마다</td>
    </tr>
    <tr>
      <td>W</td>
      <td>가장 가까운 평일(weekday) 설정</td>
      <td>10W -&gt; 10일이 평일이면 10일, 주말이면 가까운 평일에 실행</td>
    </tr>
    <tr>
      <td>#</td>
      <td>N번째 주 특정 요일 설정 (요일에서만 사용 가능)</td>
      <td>4#2 → 목요일#둘째주에 실행</td>
    </tr>
  </tbody>
</table>

<p><strong><code class="language-plaintext highlighter-rouge">*</code>와 <code class="language-plaintext highlighter-rouge">?</code>의 차이</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">?</code>는 특정 값을 지정하지 않음을 의미하는데, <code class="language-plaintext highlighter-rouge">*</code>와 헷갈릴 수 있다.</li>
  <li>예를 들어 <code class="language-plaintext highlighter-rouge">“0 0 12 * * ?”</code>는 매일 12시에 실행하지만, <code class="language-plaintext highlighter-rouge">“0 0 12 * * *”</code>는 매일 12시에 실행하면서 요일도 모든 값에 해당된다는 차이점이 있다.
<br /></li>
</ul>

<h3 id="zone">zone</h3>
<ul>
  <li>cron 표현식에서 사용할 time zone (default: Local time zone)</li>
  <li>서버의 기본 시간대에 의존하면 배포 환경마다 실행 시간이 다를 수 있으므로 zone으로 명확하게 지정해주는 것이 좋다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">cron</span> <span class="o">=</span> <span class="err">“</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">12</span> <span class="o">*</span> <span class="o">*</span> <span class="o">?</span><span class="err">”</span><span class="o">,</span> <span class="n">zone</span> <span class="o">=</span> <span class="s">"Asia/Seoul"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">seoulTimeZoneTask</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"한국 시간 기준 12시 실행"</span><span class="o">);</span>
<span class="o">}</span>    
</code></pre></div>    </div>
    <p><br />
<br /></p>
  </li>
</ul>

<h2 id="trouble-shooting-">Trouble Shooting 💫</h2>

<h3 id="같은-시간에-두-개의-스케줄러를-설정했는데-왜-하나만-실행될까">같은 시간에 두 개의 스케줄러를 설정했는데 왜 하나만 실행될까❓🤔</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Scheduled</code>는 기본적으로 <strong>싱글 스레드</strong>에서 실행되므로, 여러 개의 스케줄러를 동시에 실행하려면 application.yml이나 Config 클래스를 사용하여 스레드 풀을 2개 이상으로 설정해야 한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nl">task:</span>
    <span class="nl">scheduling:</span>
      <span class="nl">pool:</span>
        <span class="nl">size:</span> <span class="mi">5</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskSchedulerConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">TaskScheduler</span> <span class="nf">taskScheduler</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ThreadPoolTaskScheduler</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolTaskScheduler</span><span class="o">();</span>
        <span class="n">scheduler</span><span class="o">.</span><span class="na">setPoolSize</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">scheduler</span><span class="o">.</span><span class="na">initialize</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">scheduler</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="시간마다-말고-한-번만-스케줄러를-실행시킬-수는-없나">시간마다 말고 한 번만 스케줄러를 실행시킬 수는 없나❓🤔</h3>
<ul>
  <li>한 번만 실행되는 스케줄링 작업은 여러 가지가 있지만, 스프링을 사용하고 있다면 TaskScheduler 인터페이스를 구현한 ThreadPoolTaskScheduler를 사용해볼 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Scheduled</code>처럼 설정만 해주면 멀티 스레드가 가능하고, 대량의 작업을 처리할 수 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OneTimeTaskSchedulerService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ThreadPoolTaskScheduler</span> <span class="n">taskScheduler</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OneTimeTaskSchedulerService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">taskScheduler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolTaskScheduler</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">taskScheduler</span><span class="o">.</span><span class="na">initialize</span><span class="o">();</span> <span class="c1">// 초기화 필수</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">scheduleOneTimeTask</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">taskScheduler</span><span class="o">.</span><span class="na">schedule</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"10분 후 실행되는 작업 실행됨! "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
            <span class="c1">// 실행할 로직 추가</span>
        <span class="o">},</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">plusSeconds</span><span class="o">(</span><span class="mi">600</span><span class="o">));</span> <span class="c1">// 현재 시간 기준 600초(10분) 후 실행</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>위에서처럼 Config 클래스로 <code class="language-plaintext highlighter-rouge">@Bean</code> 등록을 해준다면 생성자에서 초기화할 필요 없어 코드도 간결하고, 여러 곳에서 사용할 수 있어 더 편리하다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OneTimeTaskSchedulerService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TaskScheduler</span> <span class="n">taskScheduler</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">scheduleOneTimeTask</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">taskScheduler</span><span class="o">.</span><span class="na">schedule</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"예약된 작업이 실행되었습니다! "</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
            <span class="c1">// 실행할 로직 추가</span>
        <span class="o">},</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">plusSeconds</span><span class="o">(</span><span class="mi">600</span><span class="o">));</span> <span class="c1">// 현재 시간 기준 600초(10분) 후 실행</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
<br /></p>

<p><strong>참고</strong></p>
<ul>
  <li><a href="https://spring.io/guides/gs/scheduling-tasks">Spring 공식 가이드</a></li>
  <li><a href="https://dev-coco.tistory.com/176">https://dev-coco.tistory.com/176</a></li>
  <li><a href="https://data-make.tistory.com/699">https://data-make.tistory.com/699</a></li>
  <li><a href="https://chatgpt.com/c/67ac8d2b-83d0-8003-98ec-3ffc372b8437">https://chatgpt.com/c/67ac8d2b-83d0-8003-98ec-3ffc372b8437</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="Scheduled" /><category term="TaskScheduler" /><category term="Annotation" /><summary type="html"><![CDATA[오늘은 실무에서 자주 사용하는 @Scheduled에 대해서 정리해두려고 한다. 이번 프로젝트에서도 어김없이 @Scheduled를 사용하게 되었는데, 마침 이번에 알게 된 부분까지 추가해서 @Scheduled를 사용하는 방법과 @Scheduled에서 원하는 시간에 스케줄러를 돌릴 때 사용할 수 있는 Cron식까지 알아보자.]]></summary></entry><entry><title type="html">QueryDSL에서 FROM 절에 서브쿼리를 넣어보자 (feat. @Subselect)</title><link href="http://localhost:4000/wiki/2025/01/31/querydsl-subselect.html" rel="alternate" type="text/html" title="QueryDSL에서 FROM 절에 서브쿼리를 넣어보자 (feat. @Subselect)" /><published>2025-01-31T00:00:00+09:00</published><updated>2025-01-31T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2025/01/31/querydsl-subselect</id><content type="html" xml:base="http://localhost:4000/wiki/2025/01/31/querydsl-subselect.html"><![CDATA[<p>현재 진행하는 프로젝트에서 쿠폰 관련 복잡한 쿼리를 작성하던 중이었다. 
SQL로 먼저 작업을 해보는데 서브쿼리를 from 절에 넣어야 데이터가 제대로 나오는데, QueryDSL에서는 from 절에 서브쿼리를 넣을 수 없다는 문제를 있었다.
그래서 해결 방법을 찾아보다가 <code class="language-plaintext highlighter-rouge">@Subselect</code>라는 Hibernate 기능을 사용하면 쿼리를 캡슐화해서 View를 만들어 엔티티처럼 사용할 수 있다는 걸 알게 되었다.
그래서 @Subselect를 활용하여 서브쿼리를 효과적으로 사용하는 방법을 공유하려고 한다.</p>

<p><img width="743" alt="Image" src="https://github.com/user-attachments/assets/8d09e978-f260-4342-905f-fa789ffb653f" />
<br />
<br /></p>

<h3 id="서브쿼리로-사용할-클래스-선언">서브쿼리로 사용할 클래스 선언</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Subselect</span><span class="o">(</span>
        <span class="s">"select c.id, ROW_NUMBER() OVER (ORDER BY cd.valid_end_date ASC) as rn "</span> <span class="o">+</span>
                <span class="s">"from coupons c "</span> <span class="o">+</span>
                <span class="s">"inner join coupon_duration_settings cd on c.id = cd.coupon_id "</span> <span class="o">+</span>
                <span class="s">"where c.discount_type = 'RATE' "</span> <span class="o">+</span>
                    <span class="s">"and c.discount_value = ("</span> <span class="o">+</span>
                        <span class="s">"select max(c2.discount_value) "</span> <span class="o">+</span>
                        <span class="s">"from coupons c2 "</span> <span class="o">+</span>
                        <span class="s">"where c2.discount_type = 'RATE'"</span> <span class="o">+</span>
                    <span class="s">")"</span>
<span class="o">)</span>
<span class="nd">@Immutable</span>
<span class="nd">@Synchronize</span><span class="o">(</span><span class="s">"coupons"</span><span class="o">)</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaxRateCouponSubDto</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"rn"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">rn</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>select문에서 사용한 컬럼명과 필드에 <code class="language-plaintext highlighter-rouge">@Column</code> 애노테이션으로 설정해준 name이 동일해야 찾을 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Subselect</code>를 사용한 엔티티는 어떤 특정 엔티티에 종속된 것이 아니기 때문에 <code class="language-plaintext highlighter-rouge">@Immutable</code>을 선언해주어야 하여 불변(<strong>immutable</strong>), 즉 읽기 전용으로 변경 불가함을 선언해야 한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Immutable</code> : 해당 엔티티가 변경되지 않는 데이터임을 Hibernate에게 알려주는 애노테이션으로, 변경 감지를 방지하여 성능을 최적화할 수 있다.  <br />
<img width="1003" alt="Image" src="https://github.com/user-attachments/assets/f033f851-4c23-4c52-b86e-e4f52c9e5f45" /></li>
    </ul>
  </li>
  <li>또한, 동시성 문제를 제어하여 데이터의 일관성을 보장하기 위해 <code class="language-plaintext highlighter-rouge">@Sychronize</code>을 사용했다.
<br />
<br /></li>
</ul>

<h3 id="querydsl에서-사용">QueryDSL에서 사용</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">QMaxRateCouponSubDto</span> <span class="n">maxRateCouponSub</span> <span class="o">=</span> <span class="nc">QMaxRateCouponSubDto</span><span class="o">.</span><span class="na">maxRateCouponSubDto</span><span class="o">;</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">QMaxAmountCouponSubDto</span> <span class="n">maxAmountCouponSub</span> <span class="o">=</span> <span class="nc">QMaxAmountCouponSubDto</span><span class="o">.</span><span class="na">maxAmountCouponSubDto</span><span class="o">;</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">HotelAndCouponResponse</span><span class="o">&gt;</span> <span class="nf">findHotelAndCoupons</span><span class="o">(</span><span class="nc">HotelSearchConditionDto</span> <span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
 <span class="nc">BooleanBuilder</span> <span class="n">whereClause</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BooleanBuilder</span><span class="o">();</span>
 <span class="o">...</span> 
 <span class="k">return</span> <span class="n">queryFactory</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">Projections</span><span class="o">.</span><span class="na">constructor</span><span class="o">(</span><span class="nc">HotelAndCouponResponse</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">hotel</span><span class="o">.</span><span class="na">id</span><span class="o">,</span>
                        <span class="nc">Projections</span><span class="o">.</span><span class="na">constructor</span><span class="o">(</span><span class="nc">CouponDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                                <span class="n">rateCouponDuration</span><span class="o">.</span><span class="na">isTimeDeal</span><span class="o">.</span><span class="na">stringValue</span><span class="o">().</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">rateCouponDuration</span><span class="o">.</span><span class="na">validStartDate</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">rateCouponDuration</span><span class="o">.</span><span class="na">validEndDate</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">rateCoupon</span><span class="o">.</span><span class="na">discountType</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">rateCoupon</span><span class="o">.</span><span class="na">discountValue</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">rateCoupon</span><span class="o">.</span><span class="na">maxDiscountPrice</span><span class="o">.</span><span class="na">max</span><span class="o">()</span>
                        <span class="o">),</span>
                        <span class="nc">Projections</span><span class="o">.</span><span class="na">constructor</span><span class="o">(</span><span class="nc">CouponDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                                <span class="n">amountCouponDuration</span><span class="o">.</span><span class="na">isTimeDeal</span><span class="o">.</span><span class="na">stringValue</span><span class="o">().</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">amountCouponDuration</span><span class="o">.</span><span class="na">validStartDate</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">amountCouponDuration</span><span class="o">.</span><span class="na">validEndDate</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">amountCoupon</span><span class="o">.</span><span class="na">discountType</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">amountCoupon</span><span class="o">.</span><span class="na">discountValue</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                                <span class="n">amountCoupon</span><span class="o">.</span><span class="na">maxDiscountPrice</span><span class="o">.</span><span class="na">max</span><span class="o">()</span>
                        <span class="o">)</span>
                <span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">hotel</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">couponUsageConditionObject</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">couponUsageConditionObject</span><span class="o">.</span><span class="na">hotel</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">hotel</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">rateCoupon</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">rateCoupon</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">couponUsageConditionObject</span><span class="o">.</span><span class="na">coupon</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">rateCoupon</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span>
                                <span class="nc">JPAExpressions</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">maxRateCouponSub</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
                                        <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">maxRateCouponSub</span><span class="o">)</span>
                                        <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">maxRateCouponSub</span><span class="o">.</span><span class="na">rn</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="mi">1L</span><span class="o">))</span>
                        <span class="o">)))</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">rateCouponDuration</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">rateCouponDuration</span><span class="o">.</span><span class="na">coupon</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">rateCoupon</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">amountCoupon</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">amountCoupon</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">couponUsageConditionObject</span><span class="o">.</span><span class="na">coupon</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">amountCoupon</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span>
                                <span class="nc">JPAExpressions</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">maxAmountCouponSub</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
                                        <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">maxAmountCouponSub</span><span class="o">)</span>
                                        <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">maxAmountCouponSub</span><span class="o">.</span><span class="na">rn</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="mi">1L</span><span class="o">))</span>
                        <span class="o">)))</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">amountCouponDuration</span><span class="o">).</span><span class="na">on</span><span class="o">(</span><span class="n">amountCouponDuration</span><span class="o">.</span><span class="na">coupon</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">amountCoupon</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">whereClause</span><span class="o">)</span>
                <span class="o">.</span><span class="na">groupBy</span><span class="o">(</span><span class="n">hotel</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>위에서 생성해준 클래스를 Q클래스로 선언하고, from 절에 넣어 사용하면 <code class="language-plaintext highlighter-rouge">@Subselect</code>에 작성한 코드가 그대로 서브쿼리로 들어간다.</li>
</ul>

<p><strong>SQL 예시</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">h</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">rcd</span><span class="p">.</span><span class="n">is_time_deal</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">rcd</span><span class="p">.</span><span class="n">valid_start_date</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">rcd</span><span class="p">.</span><span class="n">valid_end_date</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">rc</span><span class="p">.</span><span class="n">discount_type</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">rc</span><span class="p">.</span><span class="n">discount_value</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">rc</span><span class="p">.</span><span class="n">max_discount_price</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">acd</span><span class="p">.</span><span class="n">is_time_deal</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">acd</span><span class="p">.</span><span class="n">valid_start_date</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">acd</span><span class="p">.</span><span class="n">valid_end_date</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">ac</span><span class="p">.</span><span class="n">discount_type</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">ac</span><span class="p">.</span><span class="n">discount_value</span><span class="p">),</span>
       <span class="k">MAX</span><span class="p">(</span><span class="n">ac</span><span class="p">.</span><span class="n">max_discount_price</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">hotels</span> <span class="n">h</span>
         <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">coupon_usage_conditions</span> <span class="n">cuc</span>
                   <span class="k">ON</span> <span class="n">cuc</span><span class="p">.</span><span class="n">hotel_id</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="n">id</span>
         <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">rate_coupons</span> <span class="n">rc</span>
                   <span class="k">ON</span> <span class="n">rc</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">cuc</span><span class="p">.</span><span class="n">coupon_id</span>
                       <span class="k">AND</span> <span class="n">rc</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="p">(</span>
                           <span class="k">SELECT</span> <span class="n">mrt</span><span class="p">.</span><span class="n">id</span>
                           <span class="k">FROM</span> <span class="p">(</span>
                                    <span class="k">select</span> <span class="k">c</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cd</span><span class="p">.</span><span class="n">valid_end_date</span> <span class="k">ASC</span><span class="p">)</span> <span class="k">as</span> <span class="n">rn</span>
                                    <span class="k">from</span> <span class="n">coupons</span> <span class="k">c</span>
                                             <span class="k">inner</span> <span class="k">join</span> <span class="n">coupon_duration_settings</span> <span class="n">cd</span> <span class="k">on</span> <span class="k">c</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">cd</span><span class="p">.</span><span class="n">coupon_id</span>
                                    <span class="k">where</span> <span class="k">c</span><span class="p">.</span><span class="n">discount_type</span> <span class="o">=</span> <span class="s1">'RATE'</span>
                                      <span class="k">and</span> <span class="k">c</span><span class="p">.</span><span class="n">discount_value</span> <span class="o">=</span> <span class="p">(</span>
                                        <span class="k">select</span> <span class="k">max</span><span class="p">(</span><span class="n">c2</span><span class="p">.</span><span class="n">discount_value</span><span class="p">)</span>
                                        <span class="k">from</span> <span class="n">coupons</span> <span class="n">c2</span>
                                        <span class="k">where</span> <span class="n">c2</span><span class="p">.</span><span class="n">discount_type</span> <span class="o">=</span> <span class="s1">'RATE'</span>
                                    <span class="p">)</span>
                                <span class="p">)</span> <span class="n">mrt</span>
                           <span class="k">WHERE</span> <span class="n">mrt</span><span class="p">.</span><span class="n">rn</span> <span class="o">=</span> <span class="mi">1</span>
                       <span class="p">)</span>
         <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">rate_coupon_durations</span> <span class="n">rcd</span>
                   <span class="k">ON</span> <span class="n">rcd</span><span class="p">.</span><span class="n">coupon_id</span> <span class="o">=</span> <span class="n">rc</span><span class="p">.</span><span class="n">id</span>
         <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">amount_coupons</span> <span class="n">ac</span>
                   <span class="k">ON</span> <span class="n">ac</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">cuc</span><span class="p">.</span><span class="n">coupon_id</span>
                       <span class="k">AND</span> <span class="n">ac</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="p">(</span>
                           <span class="k">SELECT</span> <span class="n">mac</span><span class="p">.</span><span class="n">id</span>
                           <span class="k">FROM</span> <span class="p">(</span>
                                    <span class="k">select</span> <span class="n">c3</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cd2</span><span class="p">.</span><span class="n">valid_end_date</span> <span class="k">ASC</span><span class="p">)</span> <span class="k">as</span> <span class="n">rn</span>
                                    <span class="k">from</span> <span class="n">coupons</span> <span class="n">c3</span>
                                             <span class="k">inner</span> <span class="k">join</span> <span class="n">coupon_duration_settings</span> <span class="n">cd2</span> <span class="k">on</span> <span class="n">c3</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">cd2</span><span class="p">.</span><span class="n">coupon_id</span>
                                    <span class="k">where</span> <span class="n">c3</span><span class="p">.</span><span class="n">discount_type</span> <span class="o">=</span> <span class="s1">'AMOUNT'</span>
                                      <span class="k">and</span> <span class="n">c3</span><span class="p">.</span><span class="n">discount_value</span> <span class="o">=</span> <span class="p">(</span>
                                        <span class="k">select</span> <span class="k">max</span><span class="p">(</span><span class="n">c4</span><span class="p">.</span><span class="n">discount_value</span><span class="p">)</span>
                                        <span class="k">from</span> <span class="n">coupons</span> <span class="n">c4</span>
                                        <span class="k">where</span> <span class="n">c4</span><span class="p">.</span><span class="n">discount_type</span> <span class="o">=</span> <span class="s1">'AMOUNT'</span>
                                    <span class="p">)</span>
                                <span class="p">)</span> <span class="n">mac</span>
                           <span class="k">WHERE</span> <span class="n">mac</span><span class="p">.</span><span class="n">rn</span> <span class="o">=</span> <span class="mi">1</span>
                       <span class="p">)</span>
         <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">amount_coupon_durations</span> <span class="n">acd</span>
                   <span class="k">ON</span> <span class="n">acd</span><span class="p">.</span><span class="n">coupon_id</span> <span class="o">=</span> <span class="n">ac</span><span class="p">.</span><span class="n">id</span>
<span class="k">WHERE</span> <span class="n">h</span><span class="p">.</span><span class="n">has_deleted</span> <span class="o">=</span> <span class="k">false</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">h</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>

</code></pre></div></div>
<p><br />
<br /></p>

<h3 id="장점">장점</h3>
<ul>
  <li>중복으로 여러 곳에서 사용할 경우 하나의 클래스로 두는 것이 가독성이나 유지보수면에서 좋다.</li>
  <li><strong>읽기 전용(<code class="language-plaintext highlighter-rouge">immutable</code>)</strong>이기 때문에 불필요하게 엔티티를 저장 및 수정하지 않고 데이터의 일관성을 유지할 수 있다.</li>
  <li>기존 테이블(여기선 coupons)를 변경하지 않고 새로운 엔티티를 정의하여 사용할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Subselect</code>는 서브쿼리를 가상의 엔티티로 매핑하는 방식이므로, ORM이 이를 단순한 조회로 처리하기 때문에 복잡한 조인 쿼리보다 성능이 더 나을 수 있다.
<br /></li>
</ul>

<h3 id="단점">단점</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Subselect</code> 문 안의 쿼리에 동적으로 쿼리를 추가할 수 없다. (제일 아쉬운 부분)</li>
  <li>쿼리가 복잡한 경우 <strong>성능 저하</strong>를 유발할 수 있다.</li>
  <li>View는 실제 데이터가 존재하지 않기 때문에 <strong>조회만 가능</strong>하다.
<br />
<br /></li>
</ul>

<h3 id="insight">insight</h3>
<p>이번 작업을 통해 QueryDSL에서 FROM 절의 서브쿼리 문제를 해결하는 다양한 방법을 고민할 수 있었다.
처음에는 단순히 JPAExpressions로 해결하려 했지만, 쿠폰처럼 여러 곳에서 중복으로 사용할 경우 성능과 유지보수를 고려할 때 이렇게 @Subselect를 붙인 엔티티를 사용하는 게 더 적절하다는 결론을 냈다.
다행히 쿼리도 기존보다 느려지지 않아서 좋았지만, 이런 상황에서 동적 쿼리가 필요하다면 어떻게 해야 하는지 알아볼 필요가 있다.
<br />
<br />
<br /></p>

<p><strong>참고</strong></p>
<ul>
  <li><a href="https://www.baeldung.com/hibernate-subselect">@Subselect Annotation in Hibernate</a></li>
  <li><a href="https://juu-code.tistory.com/49">JPA 에서 From 절에 서브쿼리 쓰기(@Subselect 통해서 view 생성)</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="SpringBoot" /><category term="JPA" /><category term="QueryDSL" /><category term="Subselect" /><summary type="html"><![CDATA[현재 진행하는 프로젝트에서 쿠폰 관련 복잡한 쿼리를 작성하던 중이었다. SQL로 먼저 작업을 해보는데 서브쿼리를 from 절에 넣어야 데이터가 제대로 나오는데, QueryDSL에서는 from 절에 서브쿼리를 넣을 수 없다는 문제를 있었다. 그래서 해결 방법을 찾아보다가 @Subselect라는 Hibernate 기능을 사용하면 쿼리를 캡슐화해서 View를 만들어 엔티티처럼 사용할 수 있다는 걸 알게 되었다. 그래서 @Subselect를 활용하여 서브쿼리를 효과적으로 사용하는 방법을 공유하려고 한다.]]></summary></entry><entry><title type="html">작지만 확실한 성장기 - 2024 회고와 2025 목표</title><link href="http://localhost:4000/blog/2025/01/18/review-2024-and-2025.html" rel="alternate" type="text/html" title="작지만 확실한 성장기 - 2024 회고와 2025 목표" /><published>2025-01-18T00:00:00+09:00</published><updated>2025-01-18T00:00:00+09:00</updated><id>http://localhost:4000/blog/2025/01/18/review-2024-and-2025</id><content type="html" xml:base="http://localhost:4000/blog/2025/01/18/review-2024-and-2025.html"><![CDATA[<p><img alt="swagger-ui-group-setting" src="https://github.com/user-attachments/assets/bff0e492-715e-4534-a209-03fcacf10494" />
<br />
<br /></p>

<h2 id="2024-회고">2024 회고</h2>

<h3 id="잘한-점">잘한 점</h3>

<h4 id="인턴">인턴</h4>
<p>2023년까지는 공백기와 여러 가지 이유로 개발자라는 직업에 대해 회의감이 많이 들었습니다. 그래서 다음 회사에서도 이 직업을 해야 하는 이유에 대해서 찾지 못한다면 다른 직업을 찾아봐야겠다고 생각했었죠. 그렇게 입사하게 된 회사에서 다행히 좋은 팀원들을 만났습니다. 저보다 열정적이고 똑똑한 팀원들 덕분에 클린 아키텍처와 AWS 관련해서 흥미를 갖게 되었고, 개발 컨벤션이나 Jira에 대해서도 배웠습니다. 그 때 두 분 덕분에 제가 개발자로 후회없이 해보고 싶은 마음을 갖게 되어 아직도 감사하고 있습니다.
 <br /></p>

<h4 id="포텐데이와-공모전-참가">포텐데이와 공모전 참가</h4>
<p>인턴 이후 마땅히 취업 때 보여드릴 코드가 없다고 생각해 사이드 프로젝트를 구하고 있었는데요. 그때 마침 눈에 들어온 게 포텐데이였습니다. 포텐데이는 기획자, 디자이너, 프론트/백엔드 개발자가 10일간 개발하는 해커톤입니다. 포텐데이를 진행하면서 특히 같은 백엔드분께 이런저런 기능을 왜 사용해야 하는지 설명해주면서 개인적으로 많이 성장할 수 있었습니다. 프로젝트와 서버 세팅 등 주니어가 경험하기 힘든 작업을 주도적으로 진행하면서 백엔드가 하는 직무에 대해서도 많이 흥미를 느끼는 계기가 되었습니다.
 <br /></p>

<h4 id="국민취업지원제도">국민취업지원제도</h4>
<p>2024년에는 제 자신에 대해 제대로 파악해서 취업하고 싶었습니다. 그래서 지인이 경험해보고 괜찮다고 한 국민취업지원제도를 통해 이력서, 자기소개서에 대해 첨삭도 받고 연결 받은 곳을 통해 취업도 할 수 있었습니다. 이 과정에서 인프런 이력서 강의의 강사님께 첨삭도 받아봤는데, 정말 도움이 많이 되어서 저도 강사님처럼 다른 개발자분들께 도움이 되고 싶다는 생각도 하게 되었습니다.
 <br /></p>

<h4 id="취업">취업</h4>
<p>무엇이든 경험해보는 게 목표였기 때문에 가리지 않고 지원한 결과 SI 회사에 입사하게 되었습니다. 현재  회사는 SI보다는 에이전시의 성격을 가지고 있는데요, 그래서인지 프로젝트마다 많은 걸 경험하고 있습니다.<br />
입사한지 반 년 정도 된 지금, 생각보다 다양한 기능을 작업해봤는데요. 결제 작업이 되어있는 기존 프로젝트에 정기결제를 하는 작업도 해보고, 현재 프로젝트에서는 토스페이먼츠 연동, 다국어 처리, 오픈 API를 통한 달러 조회, 센드버드 등 새로운 기능을 경험해봤습니다. 이에 대해서는 차차 블로그에 글로 기록해보도록 하겠습니다.
 <br /></p>

<h4 id="글또">글또</h4>
<p>개발에 대한 동기부여를 얻기 위해 글또에 참여했는데요. 역시나 열심히 하시는 글또분들 덕분에 그래도 하반기에 조금이나마 열심히 블로그 글을 써볼 수 있었습니다.
 <br /></p>

<h3 id="아쉬운-점">아쉬운 점</h3>
<h4 id="취직-이후-개발-공부">취직 이후 개발 공부</h4>
<p>입사 후 적응도 하고 야근하느라 바빠 개발 공부에 소홀했습니다. 목표로 두었던 테스트코드 강의도 완강하지 못했네요 🥹
 <br /></p>
<h4 id="글또-참여율">글또 참여율</h4>
<p>초반 튜링의 사과에서 방문해서 커피챗을 한 것 이외에 오프라인 참여가 아무것도 없다니… 정말 너무 아쉽네요.. 다른 모임에서도 뭔가 활발히 활동하지 않은 것 같습니다..
 <br />
  <br /></p>

<h2 id="2025-목표와-다짐">2025 목표와 다짐</h2>

<h3 id="목표">목표</h3>

<h4 id="이직">이직</h4>
<p>여러 가지 이유로 하반기 이직을 목표로 하고 있는데요. 그래서 이번 상반기가 아주 중요할 것 같습니다. 이번달에는 포트폴리오도 업데이트하고, 공모전과 코딩테스트 공부 등 미루던 일들을 차차 진행해보겠습니다.</p>
<h4 id="글또-참여율-높이기">글또 참여율 높이기</h4>
<p>2024년 아쉬움에 썼던 대로 앞으로 후회하지 않기 위해서 남은 기간은 글또에 매일 방문해보려고 합니다. 또한, 튜링의 사과에도 2주에 한번 방문해서 커피챗의 기회도 많이 늘려보겠습니다. 파이팅!</p>
<h4 id="꾸준히-글쓰기">꾸준히 글쓰기</h4>
<p>글또가 끝나도 한 달에 2번 이상 글 쓰는 게 목표입니다. 주 1회가 가장 이상적이지만, 천천히 늘려보겠습니다.</p>
<h4 id="트러블슈팅-바로바로">트러블슈팅 바로바로</h4>
<p>이번 프로젝트부터는 일하기 바빠 트러블슈팅을 바로 하지 않았더니 열심히 해결한 문제도 제대로 기억나지 않더라구요. 앞으로는 트러블슈팅도 업무의 일환으로 생각하여 최대 일주일 안에 정리해서 작성해보려고 합니다.</p>
<h4 id="테스트-코드-등으로-역량-넓히기">테스트 코드 등으로 역량 넓히기</h4>
<p>올해야말로 테스트 코드를 정복해야 할 때라고 생각합니다. 회사에서는 구매해주신 강의를 통해 차근차근 연습해보려고 합니다. 이번 달 안에 박우빈님의 ‘Practical Testing: 실용적인 테스트 가이드’를 완강하고, 다음 달에는 글또 대나무숲에서 추천해주셨던 테스트 강의를 구매해서 수강해보겠습니다. 이외에도 역량을 넓히기 위해 성능 테스트 등 몇 가지를 도전해보겠습니다.</p>
<h4 id="코딩테스트-관련-공부">코딩테스트 관련 공부</h4>
<p>더 이상 미룰 수 없다.. 코딩테스트 관련 공부를 항상 미뤄왔는데요. 이제 더 이상은 안되겠습니다.. 다시 하루에 한 개씩 풀겠다는 목표를 세웠는데, 마침 글또에도 하루에 한 문제씩 풀어서 인증하는 채널이 있더라구요! 저도 한 번 조인해보겠습니다 👍</p>
<h4 id="질-좋은-의사소통">질 좋은 의사소통</h4>
<p>어느덧 3년차.. 조금씩 연차가 찰 수록 드는 생각은 “개발자에게 코드만큼 중요한 게 의사소통이다”라는 건데요. 요즘 뼈저리게 느끼고 있는 만큼 좋은 의사소통에 대해 고민하고 개선해 볼 생각입니다.</p>
<h4 id="준비된-체력">준비된 체력</h4>
<p>작년 취업 준비 기간을 운동으로 잘 버텼던 만큼 올해에는 PT를 통해 체력과 집중력 모두 잡아보려고 합니다. 다음달에 마라톤도 나가기로 했으니 기대 많이 해주시라,,,</p>
<h4 id="도파민-줄이기">도파민 줄이기</h4>
<p>출퇴근 길에도 무의미하게 게임하고 유튜브 쇼츠도 너무 무방비하게 보는 것을 막고자 게임도 지우고 유튜브 프리미엄을 해지해보려고 합니다. 계속 되길 바라며, 도파민 대신 책 읽고 출근길에는 말해보카로 영어 공부를 하며 좋은 습관을 다시 들여보겠습니다.
<br /></p>

<h3 id="마음가짐">마음가짐</h3>
<ul>
  <li>무엇이든 후회없이 해보기 (<strong>일단 해!</strong>)</li>
  <li>긍정적으로 생각하기</li>
</ul>

<h3 id="다짐">다짐</h3>
<p>2024년은 계획한 목표에 도전해보고 이뤄낸 것들이 많은 해였습니다. 그래서인지 그 어느 때보다 더 만족스러웠지만, 항상 그렇듯 아쉬운 점은 남아있습니다. 올해는 그 부분들을 채워보려고 합니다. 그러기 위해서는 크고 작은 목표를 많이 세우는 게 중요하다고 생각하는데요. (뼛속까지 J) 회고 덕분에 목표를 제대로 정리해볼 수 있어서 정말 좋았습니다. 목표 달성률을 높이려면 계속 상기시켜야 하니까 이 글에 2주마다 들어와서 목표가 어느 정도 진행되고 있는지 써보겠습니다 <strong>(어디 한 번 해보자고!)</strong>
 <br />
 <br /></p>

<hr />

<h3 id="ing">~ing</h3>

<p><strong>2025.02.16</strong> 한 달만에 와버렸다 😢</p>
<ul>
  <li>아플 때 빼고 주 4회 운동 🫶</li>
  <li>개발 역량을 위해 잇츠 스터디 시작 (오늘 첫 공식 모임!)</li>
  <li>트러블 슈팅을 나름 꼬박꼬박 하고 있지만 조금 더 자주 쓰자</li>
</ul>

<p><strong>TODO</strong></p>
<ul>
  <li>2월에 테스트코드 강의 끝내기</li>
  <li>이번주에 질투라는 감옥 완독하기</li>
</ul>

<p><strong>2025.01.18</strong></p>
<ul>
  <li>튜링의 사과 방문 w.승현님</li>
  <li>다진마늘 출석률 부족… 조금 더 힘내자</li>
  <li>이번주까지 주 4회 운동 👍</li>
</ul>

<p><strong>2025.01.01 ~</strong></p>
<ul>
  <li>유튜브 프리미엄 해지</li>
  <li>핸드폰 게임 삭제</li>
  <li>매일 말해보카 출석</li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="blog" /><category term="2024회고" /><category term="2025다짐" /><category term="글또" /><category term="글또10기" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">API 문서 자동화로 시간 절약하기 (feat.Swagger)</title><link href="http://localhost:4000/wiki/2024/12/23/spring-swagger.html" rel="alternate" type="text/html" title="API 문서 자동화로 시간 절약하기 (feat.Swagger)" /><published>2024-12-23T00:00:00+09:00</published><updated>2024-12-23T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/12/23/spring-swagger</id><content type="html" xml:base="http://localhost:4000/wiki/2024/12/23/spring-swagger.html"><![CDATA[<h4 id="배경">배경</h4>
<p>백엔드 개발자에게 API란 무엇일까요. 열심히 설계하고 작성한 코드가 의미가 있으려면, 그걸 받아서 작업하는 프론트 또는 앱 개발자분들에게 잘 전달되어야겠죠. 그렇습니다. API를 잘 작성하는 것도 중요하지만, 그걸 잘 전달하는 것 또한 매우 중요합니다. 그래서 API를 잘 전달하기 위해 API 명세서를 작성하는 방법을 소개해볼까 합니다. 제가 실무에서 작업한 방법을 알려드리는 것이니, 더 좋은 방법이나 틀린 곳이 있다면 언제든지 댓글 부탁드리겠습니다.
<br />
<br /></p>

<h3 id="swagger">Swagger</h3>
<h4 id="swagger란">Swagger란?</h4>

<ul>
  <li>Swagger는 API 명세서(문서)를 자동으로 생성 및 관리하기 위한 도구로, OpenAPI Specification(OAS)를 기반으로 API 설계 및 문서회에 활용할 수 있습니다.</li>
  <li>Swagger의 주요 장점
    <ul>
      <li>개발 속도 향상</li>
      <li>문서와 API 코드 간의 동기화 가능</li>
      <li>Swagger UI로 실시간 API 테스트 가능
<br />
<br /></li>
    </ul>
  </li>
</ul>

<h4 id="swagger-설치-및-설정-방법">Swagger 설치 및 설정 방법</h4>

<p><strong>1. 의존성 추가</strong></p>
<ul>
  <li>Swagger를 사용하기 위해 springdoc-openapi 라이브러리를 설치해주겠습니다.</li>
  <li>springfox는 더이상 지원하지 않으므로 사용을 권장하지 않습니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springdoc</span><span class="o">:</span><span class="n">springdoc</span><span class="o">-</span><span class="n">openapi</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="nl">ui:</span><span class="mf">2.2</span><span class="o">.</span><span class="mi">0</span><span class="err">'</span>
</code></pre></div></div>

<p><strong>2 Swagger 설정 클래스 추가 (공통)</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@OpenAPIDefinition</span><span class="o">(</span>
        <span class="n">info</span> <span class="o">=</span> <span class="nd">@Info</span><span class="o">(</span>
                <span class="n">title</span> <span class="o">=</span> <span class="s">"Test API Document"</span><span class="o">,</span>
                <span class="n">version</span> <span class="o">=</span> <span class="s">"v1"</span>
        <span class="o">)</span>
<span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">SwaggerConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">OpenAPI</span> <span class="nf">getOpenAPI</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OpenAPI</span><span class="o">()</span>
                <span class="o">.</span><span class="na">components</span><span class="o">(</span><span class="k">new</span> <span class="nc">Components</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img alt="swagger-ui-common-setting" src="https://github.com/user-attachments/assets/4177ac6b-a378-4143-9a42-bcfb2ff081a5" /></p>

<p><strong>3. 그룹별 Swagger 설정 클래스 추가</strong></p>
<ul>
  <li>그룹별로 API를 나눠서 제공하면 사용자가 보다 편리하게 문서를 이용할 수 있습니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">UserSwaggerConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="nc">GroupedOpenApi</span> <span class="nf">userDocs</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">GroupedOpenApi</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"고객 API"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">packagesToScan</span><span class="o">(</span><span class="s">"com.test.test.user"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img alt="swagger-ui-group-setting" src="https://github.com/user-attachments/assets/39bab756-d150-474a-ab4c-1330b385129d" />
<br />
<br /></p>

<h4 id="swagger-어노테이션-사용-방법">Swagger 어노테이션 사용 방법</h4>

<p><strong>1. Controller</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Tag</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"고객"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"고객 관련 API입니다."</span><span class="o">)</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/user"</span><span class="o">)</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"summary : 이메일 인증번호 전송"</span><span class="o">,</span>
            <span class="n">description</span> <span class="o">=</span> <span class="s">"""
                    ## 요청 :
                    - String email 이메일 (필수)
                    ## 응답 :
                    - String data "</span><span class="n">success</span><span class="s">"
                    """</span><span class="o">)</span>
    <span class="nd">@BasicApiSwaggerResponse</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/send-email"</span><span class="o">)</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CommonResponse</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="nf">sendEmail</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">SendEmailRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">sendEmail</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">CommonResponse</span><span class="o">&lt;&gt;(</span><span class="s">"이메일 인증번호 전송"</span><span class="o">,</span> <span class="nc">MessageConstants</span><span class="o">.</span><span class="na">SUCCESS_MESSAGE</span><span class="o">),</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><strong>@Tag</strong>: API 그룹 설정
    <ul>
      <li>name: 태그명</li>
      <li>description: 태그에 대한 설명</li>
    </ul>
  </li>
  <li><strong>@Operation</strong>: API에 대한 설명
    <ul>
      <li>summary: API 요약</li>
      <li>description: API 상세 설명</li>
    </ul>
  </li>
</ul>

<p><strong>2. Request class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SaveNoticeRequest</span> <span class="o">{</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"language"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"언어"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"ko"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Language</span> <span class="n">language</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"category"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"카테고리"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"공지"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">category</span><span class="o">;</span>
    
    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"title"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"제목"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"제목"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"content"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"내용"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"내용"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><strong>@Schema</strong>: 해당 Schema에 대한 설명
    <ul>
      <li>name: 스키마 이름</li>
      <li>description: 설명</li>
      <li>example: 예시</li>
    </ul>
  </li>
  <li>@Schema를 작성하여 요청값에 대한 정확한 설명을 적어주면 API 명세서가 더 완성도 있게 작성될 수 있습니다.
    <ul>
      <li>이외에도 allowValues, defaultValue 같은 옵션이 있으니 잘 적용해보면 좋겠습니다.
<br />
<br /></li>
    </ul>
  </li>
</ul>

<h4 id="swagger의-장단점">Swagger의 장단점</h4>
<p><strong>장점</strong></p>
<ol>
  <li>API 문서의 자동화</li>
  <li>협업 및 커뮤니케이션 강화</li>
  <li>실시간 테스트 및 디버깅 가능</li>
</ol>

<p><strong>단점</strong></p>
<ol>
  <li>코드와 문서가 따로 관리될 경우 실제 동작과 불일치 가능</li>
  <li>어노테이션으로 인해 코드 복잡성 증가
<br />
<br /></li>
</ol>

<h4 id="swagger-실무-활용-팁">Swagger 실무 활용 팁</h4>
<p><strong>1. @BasicApiSwaggerResponse 설정</strong>
위의 코드 예제에서 사용한 것처럼  @BasicApiSwaggerResponse 같은 응답 상태 코드를 설명해주는 어노테이션을 만들어두고 사용하면 편리합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">})</span>
<span class="nd">@Documented</span>
<span class="nd">@ApiResponses</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"200"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"API 호출 성공"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"400"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"잘못된 요청"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"404"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"존재하지 않는 API"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"403"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"인가 실패(권한 없음)"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"500"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"서버 에러"</span><span class="o">)</span>
<span class="o">})</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">BasicApiSwaggerResponse</span> <span class="o">{}</span>
</code></pre></div></div>

<p><strong>2. JWT 설정</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">SwaggerConfig</span> <span class="o">{</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">TOKEN_PREFIX</span> <span class="o">=</span> <span class="s">"Bearer"</span><span class="o">;</span>
        
        <span class="nd">@Bean</span>
        <span class="kd">public</span> <span class="nc">OpenAPI</span> <span class="nf">getOpenAPI</span><span class="o">()</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">securityJwt</span> <span class="o">=</span> <span class="s">"JWT"</span><span class="o">;</span>
                <span class="nc">SecurityRequirement</span> <span class="n">securityRequirement</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecurityRequirement</span><span class="o">().</span><span class="na">addList</span><span class="o">(</span><span class="n">securityJwt</span><span class="o">);</span>
                <span class="nc">Components</span> <span class="n">components</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Components</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">addSecuritySchemes</span><span class="o">(</span><span class="n">securityJwt</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SecurityScheme</span><span class="o">()</span>
                                <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">securityJwt</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="nc">SecurityScheme</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">HTTP</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="no">TOKEN_PREFIX</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">bearerFormat</span><span class="o">(</span><span class="nc">HttpHeaders</span><span class="o">.</span><span class="na">AUTHORIZATION</span><span class="o">)</span>
                        <span class="o">);</span>

                <span class="k">return</span> <span class="k">new</span> <span class="nf">OpenAPI</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">addSecurityItem</span><span class="o">(</span><span class="n">securityRequirement</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">components</span><span class="o">(</span><span class="n">components</span><span class="o">);</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="SpringBoot" /><category term="Swagger" /><category term="SpringAPIDocs" /><category term="글또" /><category term="글또10기" /><summary type="html"><![CDATA[배경 백엔드 개발자에게 API란 무엇일까요. 열심히 설계하고 작성한 코드가 의미가 있으려면, 그걸 받아서 작업하는 프론트 또는 앱 개발자분들에게 잘 전달되어야겠죠. 그렇습니다. API를 잘 작성하는 것도 중요하지만, 그걸 잘 전달하는 것 또한 매우 중요합니다. 그래서 API를 잘 전달하기 위해 API 명세서를 작성하는 방법을 소개해볼까 합니다. 제가 실무에서 작업한 방법을 알려드리는 것이니, 더 좋은 방법이나 틀린 곳이 있다면 언제든지 댓글 부탁드리겠습니다.]]></summary></entry><entry><title type="html">Spring Boot에서 국제화로 언어 장벽 허물기!</title><link href="http://localhost:4000/wiki/2024/11/23/spring-internationalization.html" rel="alternate" type="text/html" title="Spring Boot에서 국제화로 언어 장벽 허물기!" /><published>2024-11-23T00:00:00+09:00</published><updated>2024-11-23T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/11/23/spring-internationalization</id><content type="html" xml:base="http://localhost:4000/wiki/2024/11/23/spring-internationalization.html"><![CDATA[<h3 id="배경">배경</h3>
<p>최근 회사에서 진행하는 프로젝트가 글로벌 사용자를 타겟으로 두고 있어서 다국어 처리를 사용해 보게 되었는데요, 이에 대해 제가 알아본 방법과 작업하고 있는 방법을 정리해보겠습니다.
<br />
<br /></p>

<h3 id="spring에서의-다국어-처리국제화">Spring에서의 다국어 처리(국제화)</h3>
<p>Spring에서는 다국어 처리에 대해 국제화라는 기능을 제공하고 있습니다. messages.properties 파일의 messages라는 이름 뒤에 Locale만 붙이면 내부에서 해당 파일을 찾아 처리해 줍니다.</p>

<p><strong>messages_ko.properties</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">greeting</span><span class="o">=</span><span class="n">안녕하세요</span>
<span class="n">greeting_name</span><span class="o">=</span><span class="n">안녕하세요</span><span class="o">,</span> <span class="o">{</span><span class="mi">0</span><span class="o">}</span><span class="n">님</span>
</code></pre></div></div>

<p><strong>messages_en.properties</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">greeting</span><span class="o">=</span><span class="n">hello</span>
<span class="n">greeting_name</span><span class="o">=</span><span class="n">hello</span><span class="o">,</span> <span class="o">{</span><span class="mi">0</span><span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h4 id="locale">Locale</h4>
<p>위에서 사용하는 로케일이란 무엇일까요? 로케일은 컴퓨터 시스템에서 특정 지역이나 문화권에 맞는 설정을 정의하는 개념으로, 주로 언어, 국가, 날짜와 시간 형식, 숫자 형식, 통화, 정렬 순서 등과 같은 지역화(Localization) 정보를 포함합니다.</p>

<p><strong>Locale 표기 방식 (UNIX/LINUX 시스템)</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">language</span><span class="o">[</span><span class="n">_territory</span><span class="o">][.</span><span class="na">codeset</span><span class="o">][</span><span class="nd">@modifier</span><span class="o">]</span>
</code></pre></div></div>

<p>한국어를 사용하는 경우 ko_KR.UTF-8을 주로 사용합니다. ko는 한국어, KR은 지역을 의미하고, 코드셋에는 UTF-8이나 EUC-KR 같은 인코딩 타입을 지정해 줍니다.<br />
일반적으로는 추가 문자열을 의미하는 @modifier 없이 언어, 지역, 코드셋 3개의 값으로 형성된 하나의 로케일을 사용합니다.
<br />
<br /></p>

<h2 id="설정-방법">설정 방법</h2>

<h4 id="1-applicationymlproperties">1. application.yml(properties)</h4>
<p>그래서 Spring에서 messages 파일을 어떻게 인식하는 걸까요? 기존에는 MessageSource를 직접 Bean으로 등록해야 했습니다. 그러나 SpringBoot에서는 따로 등록할 필요 없이 설정 파일(properties/yml)에서 설정할 수 있습니다. 이렇게 설정해두면 자동으로 <code class="language-plaintext highlighter-rouge">messages_*.properties</code>의 형식으로 추가한 파일들을 인식합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">spring:</span>
  <span class="nl">messages:</span>
    <span class="nl">basename:</span> <span class="n">messages</span><span class="o">/</span><span class="n">messages</span> <span class="err">#</span> <span class="n">메시지</span> <span class="n">파일명</span><span class="o">,</span> <span class="k">default</span> <span class="n">messages</span>
    <span class="nl">encoding:</span> <span class="no">UTF</span><span class="o">-</span><span class="mi">8</span> <span class="err">#</span> <span class="n">인코딩</span> <span class="n">설정</span>
    <span class="n">always</span><span class="o">-</span><span class="n">use</span><span class="o">-</span><span class="n">message</span><span class="o">-</span><span class="nl">format:</span> <span class="kc">false</span> <span class="err">#</span> <span class="n">시스템</span> <span class="n">로케일로</span> <span class="n">fallback</span> <span class="n">하지</span> <span class="n">않도록</span> <span class="n">설정</span>
</code></pre></div></div>

<h4 id="2localeinterceptor">2.LocaleInterceptor</h4>
<p>현재 프로젝트에서는 경로에서 locale을 받아오기 때문에 로케일이 포함된 경로일 경우 로케일을 읽어 프로젝트의 기본 로케일로 설정해주고 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocaleInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">includePatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">"/api/**"</span><span class="o">};</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="c1">// URL에서 locale 추출</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">pathSegments</span> <span class="o">=</span> <span class="n">requestURI</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"/"</span><span class="o">);</span>

        <span class="c1">// locale이 포함된 경로가 /api/{locale}/... 일 때</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pathSegments</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">localeStr</span> <span class="o">=</span> <span class="n">pathSegments</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

            <span class="c1">// locale이 유효한 형식일 때만 설정</span>
            <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="nc">Locale</span><span class="o">.</span><span class="na">forLanguageTag</span><span class="o">(</span><span class="n">localeStr</span><span class="o">);</span>
            <span class="nc">Locale</span><span class="o">.</span><span class="na">setDefault</span><span class="o">(</span><span class="n">locale</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>🔼 그런데 지금 생각해보니 이렇게 처리하는 것보다 AcceptLanguage로 받는 게 더 낫지 않았을까 하는 생각이 듭니다. 프로젝트가 이미 어느 정도 진행 중이라 바꾸기 쉽지 않겠지만, 시도는 해보겠습니다.
<br /></p>

<h4 id="3-securityconfig">3. SecurityConfig</h4>
<p>작업한 환경에 따라 다르겠지만, 프로젝트에서 토큰을 사용 중이기 때문에 SecurityConfig에 2번에서 설정한 인터셉터를 추가해주었습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@EnableWebSecurity</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">LocaleInterceptor</span> <span class="n">localeInterceptor</span><span class="o">;</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 다국어 인터셉터</span>
    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">localeInterceptor</span><span class="o">).</span>
        <span class="n">addPathPatterns</span><span class="o">(</span><span class="n">localeInterceptor</span><span class="o">.</span><span class="na">getIncludePatterns</span><span class="o">());</span>
  <span class="o">}</span>
  <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="4-controllerservice">4. Controller/Service</h4>
<p>저희 프로젝트에서는 다국어를 에러 메세지 위주로 사용하기 때문에 Service단에서 사용했는데요, 이또한 작업 환경에 따라 Controller에서도 사용할 수도 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="no">EXISTING_EMAIL</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
<span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="no">EXISTING_EMAIL</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"name"</span><span class="o">},</span> <span class="n">locale</span><span class="o">);</span> <span class="c1">// 동적 메세지 사용</span>
</code></pre></div></div>

<p>보통 code, args, locale 세 가지의 파라미터를 사용한 getMessage() 메소드를 사용했습니다.</p>

<ul>
  <li><strong>code</strong>: messages에 key 값으로 넣어둔 문자열</li>
  <li><strong>args</strong>: 동적 메세지를 사용하고 싶은 경우 값을 넣을 Object 배열</li>
  <li><strong>locale</strong>: 프론트로부터 받거나 기본적으로 설정된 locale
<br />
<br /></li>
</ul>

<h4 id="마무리">마무리</h4>
<p>Spring에 대해 공부할 때부터 한 번쯤 제대로 경험해보고 싶었던 국제화 기능에 대해 자세히 알아보고 실무에서 바로 사용해보니 정말 재미있었습니다. 강력한 SpringBoot 덕분에 많은 설정 없이 원하는 언어별로 제공할 수 있네요.
<br />
<br /></p>

<h4 id="참고">참고</h4>
<ul>
  <li><a href="https://velog.io/@maketheworldwise/%EB%8B%A4%EA%B5%AD%EC%96%B4-%EC%B2%98%EB%A6%AC%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83">다국어 처리의 모든 것</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="SpringBoot" /><category term="Internationalization" /><category term="Message" /><category term="글또" /><category term="글또10기" /><summary type="html"><![CDATA[배경 최근 회사에서 진행하는 프로젝트가 글로벌 사용자를 타겟으로 두고 있어서 다국어 처리를 사용해 보게 되었는데요, 이에 대해 제가 알아본 방법과 작업하고 있는 방법을 정리해보겠습니다.]]></summary></entry><entry><title type="html">Validation 그거 어떻게 하는건데</title><link href="http://localhost:4000/wiki/2024/10/27/spring-validation.html" rel="alternate" type="text/html" title="Validation 그거 어떻게 하는건데" /><published>2024-10-27T00:00:00+09:00</published><updated>2024-10-27T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/10/27/spring-validation</id><content type="html" xml:base="http://localhost:4000/wiki/2024/10/27/spring-validation.html"><![CDATA[<h3 id="배경">배경</h3>
<p>백엔드 작업에서 Validation은 꽤나 중요도가 높은 작업으로, 클라이언트가 보내는 데이터가 서버에서 기대하는 형식과 규칙을 충족하는지 확인하는 과정을 의미합니다. 
주로 웹 애플리케이션에서 클라이언트가 API를 통해 데이터를 전송할 때 백엔드에서는 이 데이터가 정확한지, 요구사항을 만족하는지 검증을 해야 데이터베이스에 저장하거나 다음 처리를 진행하게 됩니다.
<br />
<br /></p>

<h3 id="validation이-중요한-이유">Validation이 중요한 이유</h3>
<ol>
  <li><strong>데이터 무결성 보장</strong>
    <ul>
      <li>검증되지 않은 데이터가 서버로 들어오면 데이터베이스의 일관성이 깨질 수 있습니다.</li>
      <li>예를 들어, 생년월일 필드에 알파벳이 포함되거나 전화번호에 특수 문자가 포함되는 경우, 데이터의 신뢰성을 확보하기 어렵습니다. 이때 Validation을 통해 이러한 잘못된 데이터를 사전에 차단할 수 있습니다.</li>
    </ul>
  </li>
  <li><strong>보안 강화</strong>
    <ul>
      <li>유효하지 않은 데이터는 SQL 인젝션, 스크립트 인젝션(XSS) 등과 같은 보안 취약점을 노출시킬 수 있습니다.</li>
      <li>Validation을 통해 이러한 악성 입력을 막음으로써 백엔드 시스템을 보호할 수 있습니다.</li>
    </ul>
  </li>
  <li><strong>애플리케이션 안정성 유지</strong>
    <ul>
      <li>Validation을 통해 예상하지 못한 데이터 형식으로 인한 에러를 줄일 수 있습니다.</li>
      <li>검증된 데이터만을 처리하기 때문에 애플리케이션의 안정성과 성능을 유지할 수 있습니다.</li>
    </ul>
  </li>
  <li><strong>비즈니스 로직 보호</strong>
    <ul>
      <li>유효성 검사는 단순히 데이터 형식을 확인하는 것뿐만 아니라, 비즈니스 로직에 맞는 데이터인지 검토할 수 있습니다.
<br />
<br /></li>
    </ul>
  </li>
</ol>

<h3 id="사용-방법">사용 방법</h3>
<h4 id="1-의존성-추가"><strong>1. 의존성 추가</strong></h4>
<p>Spring Boot를 사용한다면 아래처럼 javax.validation 또는 jakarta.validation 패키지를 기본적으로 제공하지만, 프로젝트에 따라 Hibernate Validator 의존성을 명시적으로 추가해야 할 수도 있습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">validation</span><span class="err">'</span>
</code></pre></div></div>

<h4 id="2-어노테이션-추가"><strong>2. 어노테이션 추가</strong></h4>
<p>Validation은 주로 어노테이션을 기반으로 동작하기 때문에 DTO에 검증 어노테이션을 추가하여 Spring이 자동으로 검증을 수행하게 할 수 있습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserRequest</span> <span class="o">{</span>

	<span class="nd">@NotBlank</span><span class="o">(</span><span class="n">message</span> <span class="o">=</span> <span class="s">"이름을 필수입니다."</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nd">@Email</span><span class="o">(</span><span class="n">message</span> <span class="o">=</span> <span class="s">"이메일 형식을 확인해주세요."</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
	<span class="nd">@Size</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">8</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"비밀번호는 최소 8자 이상이어야 합니다."</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

	<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="3-컨트롤러에서-적용"><strong>3. 컨트롤러에서 적용</strong></h4>
<p>컨트롤러에서 @Valid 어노테이션을 사용하여 DTO를 검증할 수 있습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
	<span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">saveUser</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">UserRequest</span> <span class="n">userRequest</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="s">"successfully saved User!"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="4-검증-에러-처리"><strong>4. 검증 에러 처리</strong></h4>
<p>검증에 실패하면 Spring Boot는 기본적으로 MethodArgumentNotValidException을 발생시킵니다. 이를 처리하기 위해 @ExceptionHandler를 사용하거나 @ControllerAdvice를 통해 글로벌하게 처리할 수 있습니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestControllerAdvice</span>
<span class="kd">class</span> <span class="nc">CommonExceptionHandler</span> <span class="o">{</span>

    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">MethodArgumentNotValidException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CommonResponse</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">handleValidationException</span><span class="o">(</span><span class="nc">MethodArgumentNotValidException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">CommonResponse</span><span class="o">&lt;&gt;(</span><span class="nc">ErrorCode</span><span class="o">.</span><span class="na">INVALID_REQUEST_FORMAT</span><span class="o">.</span><span class="na">getErrorMessage</span><span class="o">(),</span> <span class="kc">null</span><span class="o">),</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
<br /></p>

<h3 id="많이-쓰는-애노테이션과-팁">많이 쓰는 애노테이션과 팁</h3>
<h4 id="기본-애노테이션">[기본 애노테이션]</h4>
<p><code class="language-plaintext highlighter-rouge">@NotNull</code>, <code class="language-plaintext highlighter-rouge">@NotEmpty</code>, <code class="language-plaintext highlighter-rouge">@NotBlank</code></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@NotNull</code>은 null이 아닌 값으로, 모든 타입에 사용 가능</li>
  <li><code class="language-plaintext highlighter-rouge">@NotEmpty</code>은 null이거나 비어있지 않은 값으로, CharSequence, Collection, Map, 배열만 사용 가능</li>
  <li><code class="language-plaintext highlighter-rouge">@NotBlank</code>는 null, 빈 문자열(<code class="language-plaintext highlighter-rouge">””</code>), 하나 이상의 공백이 아닌 문자만 허용</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Size</code></p>
<ul>
  <li>문자열, 배열, 컬렉션의 길이나 크기를 제한</li>
  <li>min, max 속성을 사용해 범위를 설정할 수 있음
<br /></li>
</ul>

<h4 id="숫자-관련-애노테이션">[숫자 관련 애노테이션]</h4>
<p><code class="language-plaintext highlighter-rouge">@Min</code></p>
<ul>
  <li>숫자 필드의 최소값 지정</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Max</code></p>
<ul>
  <li>숫자 필드의 최댓값 지정</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Positive</code>, <code class="language-plaintext highlighter-rouge">@PositiveOrZero</code></p>
<ul>
  <li>값이 양수인지(0 포함 여부 선택)</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Negative</code>, <code class="language-plaintext highlighter-rouge">@NegativeOrZero</code></p>
<ul>
  <li>값이 음수인지(0 포함 여부 선택)</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Digits</code></p>
<ul>
  <li>정수와 소수의 자리수를 지정할 수 있음</li>
  <li><code class="language-plaintext highlighter-rouge">@Digits(integer = 3, fraction = 2, message = “정수 3자리, 소수 2자리까지 가능합니다.”)</code>
<br /></li>
</ul>

<h4 id="문자열-관련-애노테이션">[문자열 관련 애노테이션]</h4>
<p><code class="language-plaintext highlighter-rouge">@Email</code></p>
<ul>
  <li>문자열이 이메일 형식인지 검증</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Pattern</code></p>
<ul>
  <li>정규표현식을 사용하여 값이 특정한 패턴을 만족하는지 검증</li>
  <li><code class="language-plaintext highlighter-rouge">@Pattern(regexp = "^[0-9]{10}$", message = "전화번호는 10자리 숫자여야 합니다.")</code>
<br /></li>
</ul>

<h4 id="날짜-관련-애노테이션">[날짜 관련 애노테이션]</h4>
<p><code class="language-plaintext highlighter-rouge">@Past, @PastOrPresent</code></p>
<ul>
  <li>값이 과거 날짜인지, 현재 날짜를 포함한 과거인지 검증</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@Future</code>, <code class="language-plaintext highlighter-rouge">@FutureOrPresent</code></p>
<ul>
  <li>값이 미래 날짜인지, 현재 날짜를 포함한 미래인지 검증
<br />
<br /></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="SpringBoot" /><category term="Validation" /><category term="글또" /><category term="글또10기" /><summary type="html"><![CDATA[배경 백엔드 작업에서 Validation은 꽤나 중요도가 높은 작업으로, 클라이언트가 보내는 데이터가 서버에서 기대하는 형식과 규칙을 충족하는지 확인하는 과정을 의미합니다. 주로 웹 애플리케이션에서 클라이언트가 API를 통해 데이터를 전송할 때 백엔드에서는 이 데이터가 정확한지, 요구사항을 만족하는지 검증을 해야 데이터베이스에 저장하거나 다음 처리를 진행하게 됩니다.]]></summary></entry><entry><title type="html">이직 후기, 그리고 글또 다짐을 곁들인</title><link href="http://localhost:4000/blog/2024/10/13/geultto-first-post.html" rel="alternate" type="text/html" title="이직 후기, 그리고 글또 다짐을 곁들인" /><published>2024-10-13T00:00:00+09:00</published><updated>2024-10-13T00:00:00+09:00</updated><id>http://localhost:4000/blog/2024/10/13/geultto-first-post</id><content type="html" xml:base="http://localhost:4000/blog/2024/10/13/geultto-first-post.html"><![CDATA[<h4 id="이직">이직</h4>
<p>7월에 SI 스타트업으로 이직했습니다. 공모전 발표 다음날이라 순위의 영향은 크지 않았겠지만, 작업한 내용이 Github에 올라가 있으니 코드 내용으로 봐주셨겠죠. 조금 더 면접을 보고 결정하고 싶었지만, 포트폴리오가 괜찮은 편이라 긍정적으로 결정했습니다.</p>

<p>1월 퇴사 이후 전회사가 상식 밖으로 힘든 곳이었지만 오히려 개발자라는 직업이 내가 하고 싶은 일이라는 걸 확실하게 깨달았습니다.. 그래서 실무 경험을 보여주고자 비사이드 포텐데이에도 참가하고, 운좋게 거기에서 만난 팀원들과 함께 공모전에 참여해서 2등이라는 좋은 결과도 얻을 수 있었네요. 상반기가 매우 바쁘기도 했지만, 그만큼 보람이 있었습니다. 😊
<br />
<br /></p>

<h4 id="요즘-일하면서-느낀-건">요즘 일하면서 느낀 건</h4>
<p>7월 입사인데 벌써 2번째 프로젝트를 한창 진행하고 있는데요. 거의 혼자 백단을 개발하게 되었지만, 저번 프로젝트보다 더 나은 코드를 작성하고 싶어서 애쓰는 중입니다. 글또에 참여한 이유 중 하나지만 SI 특성상 짧은 시간 안에 개발해야 하다보니 기록해두지 않으면 남는 게 없을 것 같더라구요. 그래서 잊어버리지 않도록 틈틈이 트러블 슈팅도 기록해두고, 업무일지도 점점 세분화해서 작성하고 있습니다.
<br />
<br /></p>

<h4 id="글또에-가입한-이유">글또에 가입한 이유</h4>
<p>저는 주변 환경에 굉장히 영향을 많이 받는 편입니다. 안타깝게도 전/현회사 모두 기술 블로그를 운영하거나 글에 관심이 있는 분위기가 아니다보니, 그런 사람들이 모여있는 곳을 원했습니다. 그러다가 올해 초에 알게 된 글또 10기 신청 알림 메일이 왔을 때 너무 기뻤습니다. 지원서가 생각보다 빡세서 떨어지면 어떡하지 걱정했었지만, “삶의 지도”라는 주제에 대해 작성했을 때도 제 인생에 대해 많이 생각해보게 되어 정말 좋았습니다. 여러모로 지쳐가던 때에 원동력으로 삼을 수 있는 사람들이 있는 곳에 참여하게 되었으니, 저도 다시 긍정적으로 생산성있는 일상을 만들어 보고 싶습니다. 😊
<br />
<br /></p>

<h4 id="글감-정리">글감 정리</h4>
<p>자유로운담소에 올라온 채정님의 글감정리를 보고 저도 작성해봤습니다. (채정님 감사합니다!)
<img width="745" alt="글감정리" src="https://github.com/user-attachments/assets/cf7bbb74-2552-47c9-9a08-af322108c23c" />
전반적으로 관심있으면서 제대로 한 번 깊게 파보고 싶은 부분들을 모아봤는데요, 변경 가능성이 있지만 2주씩 꾸준히 시간을 투자해서 저도 정리하고 보는 분들도 흥미있게 읽을 수 있도록 작성해보겠습니다 👍 
<br />
그리고 별개로 미뤄두었던 블로그 정비를 다시 해야겠다고 생각했습니다. 이번주 안에 반드시 댓글과 방명록 기능을 추가해 볼게요 😉
<br />
<br /></p>

<h4 id="다짐">다짐</h4>

<p>블로그를 작성하면서 공부하거나 작업하면서 알게 된 내용을 정리했지만, 다시 읽어보면 가독성도 떨어지고 뭔가 다른 사람들의 블로그를 베끼는 것 같더라구요. 그래서 저는 글또를 통해 좋은 글을 많이 보고 주제에 대해 충분히 고민해보고 작성해보려고 합니다. 또 글을 쓰는 재미와 방법에 대해 많이 알아가고 싶어요. 첫 글부터 마감일에 작성하게 되어서 괜시리 머쓱하지만 바로 다음주 글부터는 미리미리 써보도록 하겠습니다 ‼️</p>

<p>글또가 본격적으로 시작한지 벌써 2주가 되었네요. 그동안 소모임에도 간간히 참여하고(주로 달려또🏃), 이번주에는 같은 백엔드인 다혜님을 튜사에서 만나 작업 겸 저녁챗을 진행했는데 감사하게도 이런저런 얘기를 해주셔서 덕분에 좋은 시간을 보냈습니다. ㅎㅎ 남은 10월에도 튜사에 한 번 정도는 더 방문해보고 싶네요. 지원서에 적었던 것처럼 열정적인 글또분들에게 원동력을 얻어서 더 열심히 참여하고 글도 써봐야겠습니다.</p>]]></content><author><name>Dajeong Park</name></author><category term="blog" /><category term="회고" /><category term="글또" /><category term="글또10기" /><summary type="html"><![CDATA[이직 7월에 SI 스타트업으로 이직했습니다. 공모전 발표 다음날이라 순위의 영향은 크지 않았겠지만, 작업한 내용이 Github에 올라가 있으니 코드 내용으로 봐주셨겠죠. 조금 더 면접을 보고 결정하고 싶었지만, 포트폴리오가 괜찮은 편이라 긍정적으로 결정했습니다.]]></summary></entry><entry><title type="html">AccessToken과 RefreshToken</title><link href="http://localhost:4000/wiki/2024/07/13/accesstoken-refreshtoken.html" rel="alternate" type="text/html" title="AccessToken과 RefreshToken" /><published>2024-07-13T00:00:00+09:00</published><updated>2024-07-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/07/13/accesstoken-refreshtoken</id><content type="html" xml:base="http://localhost:4000/wiki/2024/07/13/accesstoken-refreshtoken.html"><![CDATA[<h3 id="accesstoken과-refreshtoken">AccessToken과 RefreshToken</h3>
<p><code class="language-plaintext highlighter-rouge">AccessToken</code>은 사용자에 대한 정보를 담아 서비스에 접근(Access)할 수 있는 토큰이다.</p>

<p><code class="language-plaintext highlighter-rouge">RefreshToken</code>은 <code class="language-plaintext highlighter-rouge">AccessToken</code>과 다른 특별한 기능은 없지만, <code class="language-plaintext highlighter-rouge">AccessToken</code>을 새로 발급해주는 용도로 사용한다.
<br />
<br /></p>

<h4 id="accesstoken의-문제">AccessToken의 문제</h4>
<p><code class="language-plaintext highlighter-rouge">AccessToken</code>만 사용하는 기존의 인증 방식은 토큰이 탈취되었을 때 문제가 발생한다.</p>

<p>또 이러한 상황에서도 내부에서는 해당 토큰이 탈취되었는지 구분할 수 없다. 그래서 유효기간이 필요한 것이다.</p>

<p>그렇다고 유효기간이 너무 짧아도 사용자가 자주 로그인해야 하는 번거로움이 생기고, 유효기간을 늘리는 것 또한 보안에 취약할 수밖에 없다.
그래서 유효기간이 다른 <code class="language-plaintext highlighter-rouge">AccessToken</code>과 <code class="language-plaintext highlighter-rouge">RefreshToken</code> 2개를 사용하는 것이다.
<br />
<br /></p>

<h4 id="refreshtoken-사용">RefreshToken 사용</h4>
<p><code class="language-plaintext highlighter-rouge">RefreshToken</code>은 <code class="language-plaintext highlighter-rouge">AccessToken</code>처럼 JWT를 사용하지만, AccessToken는 내부 데이터에 접근하고, <code class="language-plaintext highlighter-rouge">RefreshToken</code>은 <code class="language-plaintext highlighter-rouge">AccessToken</code>을 재발급하는 역할을 한다.</p>

<p>회원가입이나 로그인에 성공할 때 2가지 토큰을 모두 발급해준다. 
데이터베이스에는 <code class="language-plaintext highlighter-rouge">RefreshToken</code>을 저장하고, 클라이언트에는 <code class="language-plaintext highlighter-rouge">AccessToken</code>과 <code class="language-plaintext highlighter-rouge">RefreshToken</code>을 보내 쿠키/세션/스토리지에 저장하여 토큰이 필요한 API마다 헤더(보통 Authorization)에 담아서 보낸다.</p>

<p><code class="language-plaintext highlighter-rouge">RefreshToken</code>은 <code class="language-plaintext highlighter-rouge">AccessToken</code>보다 유효기간이 길기 때문에, AccessToken이 만료되면 데이터베이스에 저장한 <code class="language-plaintext highlighter-rouge">RefreshToken</code>을 확인하여 다시 <code class="language-plaintext highlighter-rouge">AccessToken</code>을 재발급 해준다.
<br />
<br /></p>

<h4 id="발급-프로세스">발급 프로세스</h4>
<ol>
  <li>서버는 회원가입/로그인 성공 시 <code class="language-plaintext highlighter-rouge">AccessToken</code>과 <code class="language-plaintext highlighter-rouge">RefreshToken</code>를 발급하여 클라이언트에 전달한다.
    <ul>
      <li>이때 <code class="language-plaintext highlighter-rouge">RefreshToken</code>은 데이터베이스에 저장해둔다.</li>
    </ul>
  </li>
  <li>클라이언트는 전달받은 <code class="language-plaintext highlighter-rouge">AccessToken</code>과 <code class="language-plaintext highlighter-rouge">RefreshToken</code>을 로컬(쿠키/세션/스토리지 등)에 저장한다.</li>
  <li>클라이언트는 토큰이 필요한 API의 헤더(Authorization)에 <code class="language-plaintext highlighter-rouge">AccessToken</code>을 넣어 요청을 보낸다.
    <ul>
      <li>서버에서는 인증된 사용자인지 먼저 검증한 후 요청 API의 로직을 수행하여 응답을 보낸다.</li>
    </ul>
  </li>
  <li>로그아웃 API 요청 시 서버에서는 데이터베이스에 저장해둔 <code class="language-plaintext highlighter-rouge">RefreshToken</code>을 삭제한다.
<br />
<br /></li>
</ol>

<h4 id="토큰-검증-분기">토큰 검증 분기</h4>

<table>
  <thead>
    <tr>
      <th>AccessToken</th>
      <th>RefreshToken</th>
      <th>결과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>유효</td>
      <td>유효</td>
      <td>정상 상태로 이후 로직 수행</td>
    </tr>
    <tr>
      <td>만료</td>
      <td>유효</td>
      <td>클라이언트의 RefreshToken과 데이터베이스의 RefreshToken을 비교하여 AccessToken 재발급</td>
    </tr>
    <tr>
      <td>유효</td>
      <td>만료</td>
      <td>AccessToken을 검증하여 RefreshToken 재발급</td>
    </tr>
    <tr>
      <td>만료</td>
      <td>만료</td>
      <td>재로그인을 요청하여 토큰을 새로 발급받도록 유도</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h4 id="참고">참고</h4>
<ul>
  <li><a href="[https://inpa.tistory.com/entry/WEB-📚-Access-Token-Refresh-Token-원리-feat-JWT](https://inpa.tistory.com/entry/WEB-%F0%9F%93%9A-Access-Token-Refresh-Token-%EC%9B%90%EB%A6%AC-feat-JWT)">Access Token &amp; Refresh Token 원리</a></li>
  <li><a href="[https://velog.io/@chuu1019/Access-Token과-Refresh-Token이란-무엇이고-왜-필요할까](https://velog.io/@chuu1019/Access-Token%EA%B3%BC-Refresh-Token%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C)">Access Token과 Refresh Token이란 무엇이고 왜 필요할까?</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="JWT" /><category term="AccessToken" /><category term="RefreshToken Network" /><summary type="html"><![CDATA[AccessToken과 RefreshToken AccessToken은 사용자에 대한 정보를 담아 서비스에 접근(Access)할 수 있는 토큰이다.]]></summary></entry><entry><title type="html">JWT(JSON Web Token)</title><link href="http://localhost:4000/wiki/2024/07/01/jwt.html" rel="alternate" type="text/html" title="JWT(JSON Web Token)" /><published>2024-07-01T00:00:00+09:00</published><updated>2024-07-01T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/07/01/jwt</id><content type="html" xml:base="http://localhost:4000/wiki/2024/07/01/jwt.html"><![CDATA[<h3 id="jwtjson-web-token-">JWT(JSON Web Token) ?</h3>
<ul>
  <li><strong>JWT(Json Web Token)</strong>란 인증에 필요한 JSON 데이터를 암호화시켜 저장한 Web Token
<br /></li>
</ul>

<h4 id="왜-jwt를-사용할까">왜 JWT를 사용할까?</h4>
<ul>
  <li>HTTP는 <strong>무상태(Stateless)</strong>와 <strong>비연결성(Connectionless)</strong>이라는 특성을 가지고 있다.
    <ol>
      <li><strong>Stateless</strong>: 이전 상태를 유지/기억하지 않음
        <ul>
          <li>장점: 서버의 확장성이 높음</li>
          <li>단점: 클라이언트에게 추가 데이터를 전송해야 함</li>
        </ul>
      </li>
      <li><strong>Connectionless</strong>: 연결을 유지하지 않음</li>
    </ol>
  </li>
  <li>연결을 유지하지 않고(Connectionless) 이전 상태도 기억하지 못한다(Stateless)는 것은 이동하는 페이지마다 요청을 새로 해야한다는 것을 의미한다. 즉, 사용자가 신뢰성이 있는 사용자인지 매번 인증해야 한다.</li>
  <li>이는 번거로울 뿐만 아니라 통신이 느려질 수도 있기 때문에 한 번 인증된 사용자가 일정 기간 인증을 유지하도록 JWT를 사용한다.
<br />
<br /></li>
</ul>

<h4 id="jwt의-구조">JWT의 구조</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xxxxxx</span><span class="o">.</span><span class="na">yyyyyy</span><span class="o">.</span><span class="na">zzzzzz</span> <span class="c1">// Header.Payload.Signature</span>
</code></pre></div></div>
<ul>
  <li>JWT는 <code class="language-plaintext highlighter-rouge">.</code>을 구분자로 나누어 구성된 3가지 문자열이다.</li>
  <li>Header, Payload는 Base64 URL-safe로 인코딩되어 누구나 쉽게 복호화할 수 있기 때문에 절대 중요한 정보를 넣으면 안 되지만, Signature는 비밀키가 없으면 복호화할 수 없기 때문에 보안상 안전하다.</li>
</ul>

<p><strong>Header</strong></p>
<ul>
  <li>Signature를 해싱하기 위한 해시 알고리즘 정보, 토큰 타입</li>
</ul>

<p><strong>Payload</strong></p>
<ul>
  <li>서버와 클라이언트가 주고 받으며, 시스템에서 실제로 사용될 정보에 대한 내용들
    <ul>
      <li>대상, 이름, 발급일시, 만료일시 등</li>
    </ul>
  </li>
</ul>

<p><strong>Signature</strong></p>
<ul>
  <li>Header + Payload + 비밀키(서명)를 Header의 알고리즘으로 암호화한 문자열
    <ul>
      <li>토큰의 위변조 여부를 확인하기 위해 사용됨</li>
      <li>Header나 Payload의 데이터를 위조해도, Signature를 통해 유효한 토큰인지 알 수 있음
<br />
<br /></li>
    </ul>
  </li>
</ul>

<h4 id="장점">장점</h4>
<ul>
  <li>로컬에 저장하기 때문에 서버 용량에 영향을 주거나 받지 않는다.</li>
  <li>비밀키를 통해 서명하기 때문에 보다 안전하다.</li>
  <li>HTTP 헤더나 URL 파라미터로 간단하게 전송하기 때문에 네트워크 부하가 적다.
<br /></li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>Payload에 저장되는 정보가 많아지면 네트워크 사용량이 증가하여, 데이터 설계 고려가 필요해진다.</li>
  <li>토큰이 클라이언트에 저장되어, 서버에서 클라이언트의 토큰을 조작할 수 없다.</li>
  <li>토큰이 발급되면 중간에 만료 기간 변경이 불가능하므로, 토큰 만료 처리를 구현해야 한다.
<br />
<br /></li>
</ul>

<h4 id="정리">정리</h4>
<p>JWT도 토큰 탈취의 보안 위험에서 벗어날 수 없기 때문에, 실무에서는 AccessToken과 RefreshToken처럼 기한이 있는 인증 방식을 사용한다.</p>

<p>둘 다 JWT로 구현되지만, AccessToken은 기한이 짧고(몇 시간에서 며칠) 클라이언트에 저장된다.
RefreshToken은 AccessToken보다 수명이 길어(2주 이상) AccessToken의 재발급을 위해 사용하며 최근에는 보안을 위해 데이터베이스에 저장하고 있다.</p>

<p>그리고 AccessToken는 만료 기한이 짧기 때문에 로그인을 자주 해야하는 번거로움이 있을 수 있으니 AccessToken만 사용하기보다는 RefreshToken을 함께 사용해서 편리하고 보안을 강화하는 게 좋아보인다.
<br />
<br /></p>

<h4 id="프로젝트에-적용한-방법">프로젝트에 적용한 방법</h4>
<ul>
  <li>가입 시 내부에서 사용할 정보를 키값과 함께 인코딩하여 accessToken과 refreshToken을 생성하는데, accessToken은 헤더에 담아 리턴해주고, refreshToken은 DB에 저장한다.</li>
  <li>클라이언트로부터 API 요청을 받을 때 accessToken이 필요하다면 함께 받은 뒤 확인하는데, 이때 만약  accessToken이 만료되었다면 DB의 refreshToken을 조회해서 만료되지 않았으면 accessToken을 새로 발급해준다.
    <ul>
      <li>하지만 이때 refreshToken도 만료되었다면 다시 로그인하도록 에러를 리턴한다.</li>
    </ul>
  </li>
</ul>

<p>❓refreshToken은 어디에 두어야 할까? accessToken만 주는 것이 아니라 refreshToken도 같이 줘야 하나? 그래서 accessToken이 만료되거나 없으면 다시 같이 발급해주고 ?</p>
<ul>
  <li>accessToken만 사용하다가 보안 문제로 인해 refreshToken도 같이 발급하기 시작</li>
  <li>refreshToken을 로컬에 저장해둘 수도 있지만, refreshToken처럼 탈취할 수 있다는 단점이 있어 최근에는 refreshToken을 서버에 저장하기 시작함</li>
  <li>결국 지금 사용하는 방식이 괜찮은 방식이며, AccessToken과 RefreshToken의 개념과 HTTP에 대해서 더 자세히 알아보는게 좋겠다.
<br />
<br /></li>
</ul>

<h4 id="참고">참고</h4>
<ul>
  <li><a href="https://velog.io/@chuu1019/%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-JWTJson-Web-Token">알고 쓰자, JWT(Json Web Token)</a></li>
  <li><a href="https://inpa.tistory.com/559">JWT 토큰 인증 이란? (쿠키 vs 세션 vs 토큰)</a></li>
  <li><a href="https://puleugo.tistory.com/138">우리는 왜 JWT를 사용하는가? / JWT 사용 이유</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="JWT" /><category term="Network" /><summary type="html"><![CDATA[JWT(JSON Web Token) ? JWT(Json Web Token)란 인증에 필요한 JSON 데이터를 암호화시켜 저장한 Web Token]]></summary></entry></feed>