<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-02-29T15:37:31+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Every Single Day</title><subtitle></subtitle><author><name>Dajeong Park</name></author><entry><title type="html">프로그래머스 - 같은 숫자는 싫어 풀이</title><link href="http://localhost:4000/wiki/2024/02/29/programmers-12906.html" rel="alternate" type="text/html" title="프로그래머스 - 같은 숫자는 싫어 풀이" /><published>2024-02-29T00:00:00+09:00</published><updated>2024-02-29T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/02/29/programmers-12906</id><content type="html" xml:base="http://localhost:4000/wiki/2024/02/29/programmers-12906.html"><![CDATA[<p><img src="https://dajeongdev.github.io/assets/images/posts/programmers-12906.png" /></p>
<ul>
  <li>연속적으로 나타나는 숫자, 즉 앞의 숫자와 겹치면 제거하기 때문에 Stack을 사용해서 풀이를 해보려고 한다.</li>
  <li>https://school.programmers.co.kr/learn/courses/30/lessons/12906
<br /></li>
</ul>

<h3 id="풀이">풀이</h3>
<p><strong>첫번째</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">firstSolution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
	<span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">answer</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">==</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
			<span class="k">continue</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
	<span class="o">}</span>
	<span class="k">return</span> <span class="n">answer</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>이렇게 했더니 33.7점 나옴…</li>
  <li><code class="language-plaintext highlighter-rouge">arr.length - 1</code> 부분이 오답 → <code class="language-plaintext highlighter-rouge">arr.length</code>라고 해야 배열 끝까지 확인함</li>
  <li>리턴값이 틀린 줄 알았는데 저 부분은 맞음
<br /></li>
</ul>

<p><strong>두번째</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">secondSolution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">nun</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">answer</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">answer</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">!=</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="k">return</span> <span class="n">answer</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>한 줄이라도 더 줄이기 위해 스택에 배열의 첫번째 값을 넣는 코드(<code class="language-plaintext highlighter-rouge">answer.add(arr[0]</code>)를 제거하고, if문에 <code class="language-plaintext highlighter-rouge">answer.isEmpty()</code>로 바꿈</li>
  <li>따라서 index를 쓸 필요가 없기 때문에 향상된 for문으로 조금 더 가독성 있게 작성
<br /></li>
</ul>

<h4 id="참고">참고</h4>
<ul>
  <li>다른 사람들 풀이를 보니 Stack을 사용하지 않은 사람도 많았다. Stack 클래스를 사용하는 것도 좋지만, 다른 클래스를 사용한 코드들도 많이 참고해서 이해력을 높여봐야겠다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">otherSolution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="c1">// 이전값 저장</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">answer</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="n">prev</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">answer</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="DataStructure" /><category term="Programmers" /><summary type="html"><![CDATA[연속적으로 나타나는 숫자, 즉 앞의 숫자와 겹치면 제거하기 때문에 Stack을 사용해서 풀이를 해보려고 한다. https://school.programmers.co.kr/learn/courses/30/lessons/12906]]></summary></entry><entry><title type="html">String 배열 -&amp;gt; String</title><link href="http://localhost:4000/wiki/2024/02/26/string-array-to-string.html" rel="alternate" type="text/html" title="String 배열 -&amp;gt; String" /><published>2024-02-26T00:00:00+09:00</published><updated>2024-02-26T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/02/26/string-array-to-string</id><content type="html" xml:base="http://localhost:4000/wiki/2024/02/26/string-array-to-string.html"><![CDATA[<h3 id="배경">배경</h3>
<ul>
  <li>코딩테스트 문제를 풀면서 String 배열을 String으로 변환하는 작업이 자주 나와서 기록해두려고 한다. <br />
<br /></li>
</ul>

<h3 id="1-stringjoincharsequence-delimiter-charsequence-elements">1. String.join(CharSequence delimiter, CharSequence… elements)</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">join()</code> 메서드는 delimiter(구분자)를 사용하여 elements(대상 배열)을 문자열을 리턴할 수 있다.</li>
  <li>String.join() 메서드는 Java 1.8 이상부터 사용 가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">strArr</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello"</span><span class="o">,</span> <span class="s">"java"</span><span class="o">};</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">strArr</span><span class="o">));</span>
<span class="c1">// 결과 : hello,java</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h3 id="2-arraystostringobject-a">2. Arrays.toString(Object[] a)</h3>
<ul>
  <li>Arrays 클래스의 <code class="language-plaintext highlighter-rouge">toString()</code> 메서드를 사용하여 배열 모양의 문자열을 리턴할 수 있다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">strArr</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello"</span><span class="o">,</span> <span class="s">"java"</span><span class="o">};</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">strArr</span><span class="o">));</span>
<span class="c1">// 결과 : [hello, java]</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h3 id="3-stream---collectorsjoining">3. Stream - Collectors.joining()</h3>
<ul>
  <li>Stream의 <code class="language-plaintext highlighter-rouge">Collectors.joining()</code> 메서드를 사용하여 문자열을 리턴할 수 있다.</li>
  <li>Stream은 Java 1.8 이상부터 사용 가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">strArr</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello"</span><span class="o">,</span> <span class="s">"java"</span><span class="o">};</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">strArr</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">()));</span>
<span class="c1">// 결과 : hellojava</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h3 id="4-stringbuilderappendstring-str">4. StringBuilder.append(String str)</h3>
<ul>
  <li>가장 기본적인 방법 중에는 StringBuilder를 생성하여 <code class="language-plaintext highlighter-rouge">append()</code> 메서드를 사용하여 문자열을 리턴할 수 있다.</li>
  <li>빠르지만 for문을 사용하기 때문에 코드가 조금 길어진다는 단점이 있다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">strArr</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello"</span><span class="o">,</span> <span class="s">"java"</span><span class="o">};</span>
<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strArr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
  <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">strArr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
<span class="c1">// 결과 : hellojava</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h3 id="5-apache-commons-lang-3--라이브러리">5. Apache Commons Lang 3  라이브러리</h3>
<ul>
  <li><a href="https://commons.apache.org/proper/commons-lang">Apache Commons Lang 3</a> 라이브러리는 Java의 유틸리티 클래스 패키지로, 문자열, 배열, 숫자 등 매우 다양하고 편리한 기능을 제공한다.</li>
  <li>그 중 StringUtils 클래스의 <code class="language-plaintext highlighter-rouge">join()</code> 메서드를 사용하여 문자열 배열을 문자열로 리턴할 수 있다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">strArr</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello"</span><span class="o">,</span> <span class="s">"java"</span><span class="o">};</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">strArr</span><span class="o">,</span> <span class="s">","</span><span class="o">));</span>
<span class="c1">// 결과 : hello,java</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="String" /><summary type="html"><![CDATA[배경 코딩테스트 문제를 풀면서 String 배열을 String으로 변환하는 작업이 자주 나와서 기록해두려고 한다.]]></summary></entry><entry><title type="html">SpringBoot 3.2부터 @PathVariable 이름 미지정 시 에러</title><link href="http://localhost:4000/wiki/2024/01/17/pathvariable-name-missing.html" rel="alternate" type="text/html" title="SpringBoot 3.2부터 @PathVariable 이름 미지정 시 에러" /><published>2024-01-17T00:00:00+09:00</published><updated>2024-01-17T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/01/17/pathvariable-name-missing</id><content type="html" xml:base="http://localhost:4000/wiki/2024/01/17/pathvariable-name-missing.html"><![CDATA[<h3 id="배경">배경</h3>
<ul>
  <li>팀원이 작업한 코드를 pull 받아서 실행시켰는데 아래처럼 에러가 발생했다. 그런데 팀원이 올리기 전에 실행시켰을 땐 발생하지 않았던 에러가 왜 내 로컬에서는 발생했을까?
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">IllegalArgumentException</span><span class="o">:</span> <span class="nc">Name</span> <span class="k">for</span> <span class="n">argument</span> <span class="n">of</span> <span class="n">type</span> <span class="o">[</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">]</span> <span class="n">not</span> <span class="n">specified</span><span class="o">,</span> <span class="n">and</span> <span class="n">parameter</span> <span class="n">name</span> <span class="n">information</span> <span class="n">not</span> <span class="n">found</span> <span class="n">in</span> <span class="kd">class</span> <span class="nc">file</span> <span class="n">either</span><span class="o">.</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h3 id="원인">원인</h3>
<ul>
  <li>Spring Boot 3.2 이전에는 경로의 변수명와 @PathVariable의 변수명이 같을 때 생략할 수 있었다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{id}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">testMethod</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div>    </div>
    <p><img src="https://dajeongdev.github.io/assets/images/posts/parameter-name-retention.png" /></p>
  </li>
  <li>Spring Boot 3.2 전에는 바이트코드를 파싱해서 매개변수 이름을 추론하려고 시도했지만 3.2 부터는 이 부분이 사라져서 @PathVariable을 포함한 몇몇 어노테이션(@RequestParam, @Autowired, @ConfigurationProperties)에서 매개변수 인식 문제가 발생하고 있다.</li>
  <li><a href="https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention">공식 문서 참고</a>
<br /></li>
</ul>

<h3 id="해결방법">해결방법</h3>
<ol>
  <li><strong>어노테이션에 이름을 생략하지 않고 항상 적는다.</strong>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{id}"</span><span class="o">)</span>
 <span class="kd">public</span> <span class="nc">String</span> <span class="nf">testMethod</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div>    </div>
  </li>
  <li><strong>컴파일 시점에 -parameters 옵션을 적용한다.</strong>
    <ol>
      <li>IntelliJ IDEA에서 File -&gt; Settings를 연다. (Mac은 IntelliJ IDEA -&gt; Settings)</li>
      <li>Build, Execution, Deployment → Compiler → Java Compiler로 이동한다.</li>
      <li>Additional command line parameters라는 항목에 다음을 추가한다. (<code class="language-plaintext highlighter-rouge">-parameters</code>)</li>
      <li>out 폴더를 삭제하고 다시 실행한다. <strong>꼭 out 폴더를 삭제해야 다시 컴파일이 일어난다.</strong></li>
    </ol>
  </li>
  <li><strong>Gradle로 빌드하고 실행한다.</strong>
    <ul>
      <li>참고로 이 문제는 Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle에서 Build and run using를 IntelliJ IDEA로 선택한 경우에만 발생한다.</li>
      <li>Gradle로 선택한 경우에는 Gradle이 컴파일 시점에 해당 옵션을 자동으로 적용해준다.
<br /></li>
    </ul>
  </li>
</ol>

<h4 id="나의-의견">나의 의견</h4>
<ul>
  <li>결국 김영한님 강의를 많이 봤던 나는 프로젝트 초반에 Build and run using 설정을 IntelliJ로 바꾸고 사용 중이었고, 팀원은 Gradle로 빌드 및 실행을 하고 있어서 발생한 문제였다.</li>
  <li>나 또한 설정을 바꿨지만, Spring Boot 3.2부터 이름을 붙이지 않으면 에러가 발생할 수도 있는 부분이기 때문에 우리 팀은 해결방법 1번을 선택하여 이름을 일관적이게 붙여주기로 결정했다.
<br /></li>
</ul>

<h4 id="참고">참고</h4>
<ul>
  <li><a href="https://www.inflearn.com/questions/1088283/pathvariable-%EB%B3%80%EC%88%98%EB%AA%85-%EA%B0%99%EC%9D%84%EB%95%8C-%EC%83%9D%EB%9E%B5%EC%8B%9C-%EC%98%A4%EB%A5%98-%EB%B9%8C%EB%93%9C-%EC%84%A4%EC%A0%95%EC%9D%84-gradle%EB%A1%9C-%ED%95%98%EB%A9%B4-%ED%95%B4%EA%B2%B0%EB%90%98%EB%8A%94-%EA%B2%83-%EA%B0%99%EC%8A%B5%EB%8B%88%EB%8B%A4">https://www.inflearn.com/questions/1088283</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="SpringBoot" /><summary type="html"><![CDATA[배경 팀원이 작업한 코드를 pull 받아서 실행시켰는데 아래처럼 에러가 발생했다. 그런데 팀원이 올리기 전에 실행시켰을 땐 발생하지 않았던 에러가 왜 내 로컬에서는 발생했을까? java.lang.IllegalArgumentException: Name for argument of type [java.lang.String] not specified, and parameter name information not found in class file either.]]></summary></entry><entry><title type="html">update 시 @CreatedDate를 붙인 컬럼에 null이 들어가는 문제와 해결 방법</title><link href="http://localhost:4000/wiki/2024/01/12/jpa-created-date-column-null.html" rel="alternate" type="text/html" title="update 시 @CreatedDate를 붙인 컬럼에 null이 들어가는 문제와 해결 방법" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2024/01/12/jpa-created-date-column-null</id><content type="html" xml:base="http://localhost:4000/wiki/2024/01/12/jpa-created-date-column-null.html"><![CDATA[<h3 id="배경">배경</h3>
<ul>
  <li>update문의 결과를 확인하는데 생성일 컬럼이 null로 update 되는 문제를 발견했다. <br />
<br /></li>
</ul>

<h3 id="원인">원인</h3>
<ul>
  <li>정확히는 생성일 컬럼에 이름을 설정하기 위해 붙인 @Column 어노테이션의 옵션 중 하나인 updatable의 기본값이 true라서 값을 설정해주지 않은 생성일 컬럼에 null이 update 된 것이다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">({</span><span class="no">METHOD</span><span class="o">,</span> <span class="no">FIELD</span><span class="o">})</span> 
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Column</span> <span class="o">{</span>
	    <span class="cm">/**
	     * (Optional) Whether the column is included in SQL UPDATE 
	     * statements generated by the persistence provider.
	     */</span>
	    <span class="kt">boolean</span> <span class="nf">updatable</span><span class="o">()</span> <span class="k">default</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="해결-방법">해결 방법</h3>
<ul>
  <li>그래서 @Column 어노테이션의 updatable 옵션을 false로 지정해주어야 한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CreatedDate</span>
<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"created_date_time"</span><span class="o">,</span> <span class="o">**</span><span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">**)</span>
<span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdDateTime</span><span class="o">;</span>
</code></pre></div></div>
<p><br /></p>

<h4 id="참고">참고</h4>
<ul>
  <li>https://wakestand.tistory.com/935</li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="JPA" /><summary type="html"><![CDATA[배경 update문의 결과를 확인하는데 생성일 컬럼이 null로 update 되는 문제를 발견했다.]]></summary></entry><entry><title type="html">hibernate6 custom function(MySQL Dialect)</title><link href="http://localhost:4000/wiki/2023/12/30/hibernate6-custom-function.html" rel="alternate" type="text/html" title="hibernate6 custom function(MySQL Dialect)" /><published>2023-12-30T00:00:00+09:00</published><updated>2023-12-30T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/12/30/hibernate6-custom-function</id><content type="html" xml:base="http://localhost:4000/wiki/2023/12/30/hibernate6-custom-function.html"><![CDATA[<h3 id="배경">배경</h3>
<p>현재 프로젝트에서 QueryDSL을 사용 중인데 여기에 집계함수를 사용하고 싶어서 사용자 함수 추가를 위해 서치 후 적용해보려고 했다. 그런데 이게 웬일.. Spring boot 3점대에서는 hibernate 6.1을 기본으로 사용하고 있어서 당장 올해 3월까지 올라온 블로그 글의 코드도 적용되지 않았다.. 그래서 한시간을 고생해서 적용해보고 고치고 하다가 김영한님 JPA 강의의 커뮤니티에 어떤 친절한 분이 해결방안을 올려주셨다.. 정말 천사,,</p>

<p><img src="https://dajeongdev.github.io/assets/images/posts/spring-boot-3.2-hibernate-version.png" />
<a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M4-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M4-Release-Notes</a>
<br />
<br /></p>

<h3 id="해결">해결</h3>
<ol>
  <li>FunctionContributor의 구현체를 만들어준다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomFunctionContributor</span> <span class="kd">implements</span> <span class="nc">FunctionContributor</span> <span class="o">{</span>
    
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contributeFunctions</span><span class="o">(</span><span class="nc">FunctionContributions</span> <span class="n">functionContributions</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">functionContributions</span><span class="o">.</span><span class="na">getFunctionRegistry</span><span class="o">()</span>
            <span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"group_concat"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">StandardSQLFunction</span><span class="o">(</span><span class="s">"group_concat"</span><span class="o">,</span> <span class="nc">StandardBasicTypes</span><span class="o">.</span><span class="na">STRING</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>src/main/resources 하위에 META-INF/services/org.hibernate.boot.model.FunctionContributor 파일을 생성한다.</li>
  <li>
    <p>해당 파일에 1번의 구현체를 등록한다.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">패키지명.구현체</code> 이름의 형태로 등록</li>
      <li>com.example.com.config.~Contributor
      -   yml 파일의 dialect 변경은 필요없음
<br /> <br />
<br /></li>
    </ul>
  </li>
</ol>

<h3 id="시도">시도</h3>
<ul>
  <li><a href="https://discourse.hibernate.org/t/migrate-hibernate-5-to-6-with-spring-boot-2-7-x-to-3/7787/2">https://discourse.hibernate.org/t/migrate-hibernate-5-to-6-with-spring-boot-2-7-x-to-3/7787/2</a></li>
  <li><a href="https://discourse.hibernate.org/t/migration-of-dialect-to-hibernate-6/6956/16">https://discourse.hibernate.org/t/migration-of-dialect-to-hibernate-6/6956/16</a></li>
  <li><a href="https://thisiswoo.github.io/development/using-jpa-querydsl-groupconcat-func.html">https://thisiswoo.github.io/development/using-jpa-querydsl-groupconcat-func.html</a>
<br />
<br /></li>
</ul>

<p><strong>참고</strong></p>
<ul>
  <li><a href="https://www.inflearn.com/questions/1096265/hibernate-6-custom-%ED%95%A8%EC%88%98-%EB%93%B1%EB%A1%9D-%EB%B0%A9%EB%B2%95-%EA%B3%B5%EC%9C%A0"></a><a href="https://www.inflearn.com/questions/1096265/hibernate-6-custom-%ED%95%A8%EC%88%98-%EB%93%B1%EB%A1%9D-%EB%B0%A9%EB%B2%95-%EA%B3%B5%EC%9C%A0">https://www.inflearn.com/questions/1096265/hibernate-6-custom-함수-등록-방법-공유</a></li>
  <li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M4-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M4-Release-Notes</a></li>
  <li><a href="https://velog.io/@ttomy/%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-dialectmatch-against%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0"></a><a href="https://velog.io/@ttomy/%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-dialectmatch-against%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">https://velog.io/@ttomy/사용자-정의-dialectmatch-against사용하기</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Hibernate6" /><category term="MySQLDialect" /><category term="SpringBoot3" /><category term="QueryDSL" /><category term="JPQL" /><summary type="html"><![CDATA[배경 현재 프로젝트에서 QueryDSL을 사용 중인데 여기에 집계함수를 사용하고 싶어서 사용자 함수 추가를 위해 서치 후 적용해보려고 했다. 그런데 이게 웬일.. Spring boot 3점대에서는 hibernate 6.1을 기본으로 사용하고 있어서 당장 올해 3월까지 올라온 블로그 글의 코드도 적용되지 않았다.. 그래서 한시간을 고생해서 적용해보고 고치고 하다가 김영한님 JPA 강의의 커뮤니티에 어떤 친절한 분이 해결방안을 올려주셨다.. 정말 천사,,]]></summary></entry><entry><title type="html">List에서 원소 삭제하기 remove()</title><link href="http://localhost:4000/wiki/2023/11/21/list-remove-method.html" rel="alternate" type="text/html" title="List에서 원소 삭제하기 remove()" /><published>2023-11-21T00:00:00+09:00</published><updated>2023-11-21T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/21/list-remove-method</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/21/list-remove-method.html"><![CDATA[<h3 id="배경">배경</h3>
<p>코딩테스트로 문제를 풀다가 list에서 원소를 삭제하는 remove() 메소드를 사용할 때 값이 일치하면 삭제하고 싶은데 그냥 숫자를 넣으면 인덱스로 인식하는 것을 발견하였다. <br />
<br /></p>

<h3 id="integer-removeint-index">Integer remove(int index)</h3>
<ul>
  <li>파라미터를 int로 전달하면 해당 index의 값을 삭제한다. <br />
<br /></li>
</ul>

<h3 id="boolean-removeobject-o">boolean remove(Object o)</h3>
<ul>
  <li>파라미터로 Object 객체를 전달하면, List에서 해당 객체를 찾아서 <strong>첫번째</strong>로 나오는 값을 삭제한 뒤 값을 삭제하는 데 성공하면 <strong>true</strong>, 값이 없으면 <strong>false</strong>를 리턴한다.</li>
  <li><strong>예시</strong> (프로그래머스 level 0 배열에서 원소 삭제하기)
    <ul>
      <li><a href="https://school.programmers.co.kr/learn/courses/30/lessons/181844">https://school.programmers.co.kr/learn/courses/30/lessons/181844</a>
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">delete_list</span><span class="o">)</span> <span class="o">{</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">answer</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">arr</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">delete_list</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
<span class="k">if</span> <span class="o">(</span><span class="n">answer</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">delete_list</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span>
        <span class="n">answer</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">delete_list</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span> <span class="c1">// (Integer)으로 형변환도 가능</span>
<span class="k">return</span> <span class="n">answer</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>그래서 위처럼 Object로 인식할 수 있도록 <strong>Wrapper 클래스로(여기선 Integer) 형변환해주는 방법</strong>이 있다.</li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="List" /><category term="Method" /><summary type="html"><![CDATA[배경 코딩테스트로 문제를 풀다가 list에서 원소를 삭제하는 remove() 메소드를 사용할 때 값이 일치하면 삭제하고 싶은데 그냥 숫자를 넣으면 인덱스로 인식하는 것을 발견하였다.]]></summary></entry><entry><title type="html">Dangling meta character ‘?’ near index 0</title><link href="http://localhost:4000/wiki/2023/11/13/java-regex-pattern-syntax-error.html" rel="alternate" type="text/html" title="Dangling meta character ‘?’ near index 0" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/13/java-regex-pattern-syntax-error</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/13/java-regex-pattern-syntax-error.html"><![CDATA[<h3 id="에러">에러</h3>
<p><img src="https://dajeongdev.github.io/assets/images/posts/java-regex-pattern-syntax-error.png" alt="error_image" />
<br /></p>

<h3 id="코드">코드</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">split</span> <span class="o">=</span> <span class="n">question</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"?"</span><span class="o">);</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="원인">원인</h3>
<ul>
  <li>split() 메소드 사용시 특정한 문자를 regex로 사용하는 경우 동작하지 않는다.
  * 특정한 문자: 이미 문법 상 사용 중인 특수문자 (|, &amp;, ^, *, ?, . 등) <br />
<br /></li>
</ul>

<h3 id="해결-방법">해결 방법</h3>
<ul>
  <li>regex 앞에 <strong>백슬래시(\)</strong>를 <strong>두 번</strong> 넣어주면 코드가 정상적으로 동작한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">split</span> <span class="o">=</span> <span class="n">question</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\?"</span><span class="o">);</span>
</code></pre></div></div>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="Error" /><summary type="html"><![CDATA[에러]]></summary></entry><entry><title type="html">Map - getOrDefault(Object key, V defaultValue)</title><link href="http://localhost:4000/wiki/2023/11/13/map-getOrDefault.html" rel="alternate" type="text/html" title="Map - getOrDefault(Object key, V defaultValue)" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/13/map-getOrDefault</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/13/map-getOrDefault.html"><![CDATA[<h3 id="map---getordefaultobject-key-v-defaultvalue">Map - getOrDefault(Object key, V defaultValue)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="no">V</span> <span class="nf">getOrDefault</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">defaultValue</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Node</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">e</span><span class="o">;</span>
		<span class="k">return</span> <span class="o">(</span><span class="n">e</span> <span class="o">=</span> <span class="n">getNode</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">defaultValue</span> <span class="o">:</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>key가 존재하면 key의 value를 반환하고, 없으면 설정한 디폴트 값을 반환한다. <br />
<br /></li>
</ul>

<h4 id="사용-예시-프로그래머스-level-2-위장">사용 예시 (프로그래머스 level 2 위장)</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[][]</span> <span class="n">clothes1</span> <span class="o">=</span> <span class="o">/{/{</span><span class="s">"yellow_hat"</span><span class="o">,</span> <span class="s">"headgear"</span><span class="o">/},</span> 
			<span class="o">/{</span><span class="s">"blue_sunglasses"</span><span class="o">,</span> <span class="s">"eyewear"</span><span class="o">/},</span> 
			<span class="o">/{</span><span class="s">"green_turban"</span><span class="o">,</span> <span class="s">"headgear"</span><span class="o">/}/};</span>
<span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">clothes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>HashMap은 동일한 key에 value를 추가할 경우 value가 덮어쓰기 되기 때문에 getOrDefault() 메소드를 사용하여 예시처럼 카운트를 추가하는 등의 방법을 사용할 수 있다.</li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="Map" /><category term="Method" /><summary type="html"><![CDATA[Map - getOrDefault(Object key, V defaultValue) public V getOrDefault(Object key, V defaultValue) { Node&lt;K,V&gt; e; return (e = getNode(key)) == null ? defaultValue : e.value; } key가 존재하면 key의 value를 반환하고, 없으면 설정한 디폴트 값을 반환한다.]]></summary></entry><entry><title type="html">MyBatis와 JPA</title><link href="http://localhost:4000/wiki/2023/11/13/mybatis-jpa.html" rel="alternate" type="text/html" title="MyBatis와 JPA" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/13/mybatis-jpa</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/13/mybatis-jpa.html"><![CDATA[<p>먼저 MyBatis와 JPA를 알아보기 전에 알아두면 좋은 두 개념을 살펴보자.</p>
<h4 id="sql-mapper">SQL Mapper</h4>
<p>SQL Mapper는 직접 작성한 SQL에 해당되는 데이터를 읽고, 결과값을 객체화시켜 사용할 수 있게 해준다. SQL에 데이터베이스에 따라 SQL 문법이 다르므로 특정 RDB에 종속적이며, SQL에 의존적인 개발하게 된다.</p>
<ul>
  <li>예) MyBatis</li>
</ul>

<h4 id="ormobject-relational-mapping">ORM(Object-Relational Mapping)</h4>
<p>ORM은 객체는 객체대로 설계하고, 관계형 데이터베이스(RDB)는 관계형 데이터베이스대로 설계 후 ORM이 중간에서 매핑해주는 것을 의미한다. SQL이 아닌 관계형 데이터베이스에 데이터 자체를 매핑하기 때문에 SQL을 직접 작성할 필요가 없다.
이로 인해 특정 데이터베이스에 구애받지 않으며, 제공하는 메서드와 코드 또한 직관적이어서 사용하기 편리하다.</p>
<ul>
  <li>예) Hibernate, JPA 등 <br />
<br /></li>
</ul>

<hr />
<h3 id="mybatisjava-persistence-framework">MyBatis(Java Persistence Framework)</h3>
<p>MyBatis는 SQL Mapper의 일종으로 개발자가 지정한 SQL, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 영속성 프레임워크다. MyBatis는 JDBC로 처리하는 상당 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해주고, 데이터베이스 record에 원시 타입과 Map 그리고 Java POJO를 설정하여 매핑하기 위해 XML과 Annotation을 사용할 수 있다. 즉, SQL문을 직접 작성하여 객체와 매핑시켜준다.</p>

<h4 id="장점">장점</h4>
<ul>
  <li>SQL 쿼리를 직접 작성하므로 최적화된 쿼리를 구현할 수 있다.</li>
  <li>SQL의 세부적인 내용 변경이나 동적 쿼리 사용 시 JPA보다 간편하게 구현 가능하다.</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>쿼리를 직접 작성하기 때문에 데이터베이스 변경 시 수정할 부분이 굉장히 많아진다. (특정 데이터베이스에 종속적이다)</li>
  <li>런타임 시 에러를 발견할 수 있다.</li>
  <li>비슷한 코드를 반복적으로 작업하게 된다.</li>
</ul>

<p><br /></p>

<hr />
<h3 id="jpajava-persistence-api">JPA(Java Persistence API)</h3>
<p>JPA는 Java ORM의 기술 표준에 대한 API 표준 명세로, 객체와 데이터베이스의 패러다임 불일치로 인한 문제점을 해결하기 위해 등장했다. 개발자는 객체지향적인 개발을 하고, JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성해서 실행하기 때문에 SQL에 종속적인 개발이 아닌 객체 중심 개발을 할 수 있다.
JPA는 인터페이스이기 때문에, 구현체로는 Hibernate, EclipseLink, DataNucleus 등이 있다. Spring에서 JPA를 사용할 땐 이 구현체들을 직접 다루는게 아니라 좀 더 쉽게 사용하기 위해 추상화시킨 Spring Data JPA를 사용한다. 덕분에 관계형 데이터베이스 외에 다른 저장소로 쉽게 교체할 수 있다. (예: Spring Data JPA -&gt; Spring Data MongoDB)</p>

<h4 id="장점-1">장점</h4>
<ul>
  <li>객체 중심 개발을 하기 때문에 생산성이 향상되고, 유지보수 또한 편하다.</li>
  <li>컴파일 시에 에러를 발견할 수 있다.</li>
</ul>

<h4 id="단점-1">단점</h4>
<ul>
  <li>객체지향과 관계형 데이터베이스 둘 다 이해해야 하기 때문에 러닝 커브가 높다.</li>
</ul>

<p><br /></p>

<hr />
<h4 id="개인적인-의견">개인적인 의견</h4>
<p>요즘엔 QueryDsl 같은 조회용 프레임워크를 함께 사용하여 복잡한 연산도 깔끔하게 할 수 있다. 개인적으로 자바 개발자라면 한 번쯤 꼭 배워보는게 좋다고 생각하며, 언젠가는 꼭 실무에서 JPA를 사용해보고 싶다!</p>

<hr />
<h4 id="참고">참고</h4>
<ul>
  <li><a href="https://mybatis.org/mybatis-3/ko/index.html">https://mybatis.org/mybatis-3/ko/index.html</a></li>
  <li><a href="https://dreaming-soohyun.tistory.com/entry/JPA%EC%99%80-MyBatis%EC%9D%98-%EC%B0%A8%EC%9D%B4-ORM%EA%B3%BC-SQL-Mapper">https://dreaming-soohyun.tistory.com/entry/JPA%EC%99%80-MyBatis%EC%9D%98-%EC%B0%A8%EC%9D%B4-ORM%EA%B3%BC-SQL-Mapper</a></li>
  <li><a href="https://incheol-jung.gitbook.io/docs/q-and-a/spring/jpa-vs-mybatis">https://incheol-jung.gitbook.io/docs/q-and-a/spring/jpa-vs-mybatis</a></li>
  <li>이동욱님의 책 [스프링 부트와 AWS로 혼자 구현하는 웹 서비스]</li>
  <li>김영한님의 인프런 강의 [실전! 스프링 부트와 JPA 활용 시리즈] <a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-%ED%99%9C%EC%9A%A9-1">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-%ED%99%9C%EC%9A%A9-1</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Spring" /><category term="MyBatis" /><category term="JPA" /><summary type="html"><![CDATA[먼저 MyBatis와 JPA를 알아보기 전에 알아두면 좋은 두 개념을 살펴보자. SQL Mapper SQL Mapper는 직접 작성한 SQL에 해당되는 데이터를 읽고, 결과값을 객체화시켜 사용할 수 있게 해준다. SQL에 데이터베이스에 따라 SQL 문법이 다르므로 특정 RDB에 종속적이며, SQL에 의존적인 개발하게 된다. 예) MyBatis]]></summary></entry><entry><title type="html">MySQL IN</title><link href="http://localhost:4000/wiki/2023/11/13/mysql-in.html" rel="alternate" type="text/html" title="MySQL IN" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/13/mysql-in</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/13/mysql-in.html"><![CDATA[<h3 id="개념">개념</h3>
<ul>
  <li>여러 값을 OR 관계로 묶어서 나열하는 조건을 WHERE 절에 사용할 때 쓸 수 있는 키워드</li>
  <li>IN 연산자는 조건의 범위를 지정하는 데 사용된다.</li>
  <li>값은 콤마(,)로 구분하여 괄호 내에 묶고, 이 값 중에서 하나 이상과 일치하면 조건에 맞는 것으로 평가된다. <br />
<br /></li>
</ul>

<h3 id="예시">예시</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- OR 조건 표현</span>
<span class="k">where</span> <span class="n">condition</span> <span class="o">=</span> <span class="nv">"A"</span> <span class="k">or</span> <span class="n">condition</span> <span class="o">=</span> <span class="nv">"B"</span><span class="p">;</span>

<span class="c1">-- IN 조건</span>
<span class="k">where</span> <span class="n">condition</span> <span class="k">in</span> <span class="p">(</span><span class="nv">"A"</span><span class="p">,</span> <span class="nv">"B"</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="장점">장점</h3>
<ul>
  <li>목록에 넣을 값이 여러 개일 때, IN 연산자가 OR 연산자 보다 쓰기도, 보기도, 이해하기도 쉽다.</li>
  <li>IN을 사용하면 조건 순서를 보다 쉽게 관리할 수 있고, 연산자의 수도 줄어든다.</li>
  <li>IN 연산자가 OR 연산자 보다 실행 속도가 빠르다.</li>
  <li>IN 연산자 안에 다른 SELECT문(서브 쿼리)를 넣을 수 있다. <br />
<br /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://velog.io/@inyong_pang/MySQL-IN-%EC%A1%B0%EA%B1%B4"></a><a href="https://velog.io/@inyong_pang/MySQL-IN-%EC%A1%B0%EA%B1%B4">https://velog.io/@inyong_pang/MySQL-IN-조건</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="SQL" /><category term="MySQL" /><summary type="html"><![CDATA[개념 여러 값을 OR 관계로 묶어서 나열하는 조건을 WHERE 절에 사용할 때 쓸 수 있는 키워드 IN 연산자는 조건의 범위를 지정하는 데 사용된다. 값은 콤마(,)로 구분하여 괄호 내에 묶고, 이 값 중에서 하나 이상과 일치하면 조건에 맞는 것으로 평가된다.]]></summary></entry></feed>