<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Every Single Day</title><subtitle></subtitle><author><name>Dajeong Park</name></author><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-n-number-convert.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-n-number-convert</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-n-number-convert.html"><![CDATA[<h1 id="진수-변환">진수 변환</h1>

<h2 id="10진수--2816진수">10진수 → 2/8/16진수</h2>

<table>
  <thead>
    <tr>
      <th>return type</th>
      <th>class</th>
      <th>method</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>static String</td>
      <td>java.lang.Integer</td>
      <td>toBinaryString(int i)</td>
      <td>10진수 → 2진수</td>
    </tr>
    <tr>
      <td>static String</td>
      <td>java.lang.Integer</td>
      <td>toOctalString(int i)</td>
      <td>10진수 → 8진수</td>
    </tr>
    <tr>
      <td>static String</td>
      <td>java.lang.Integer</td>
      <td>toHexaString(int i)</td>
      <td>10진수 → 16진수</td>
    </tr>
  </tbody>
</table>

<p>➕ 위의 세 메소드는 파라미터로 정수 뿐만 아니라 정수 두 개를 비트 연산자(OR)로 계산할 수도 있다.</p>

<h2 id="10진수--n진수">10진수 → N진수</h2>

<table>
  <thead>
    <tr>
      <th>return type</th>
      <th>class</th>
      <th>method</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>static String</td>
      <td>java.lang.Integer</td>
      <td>toString(int n, int radix)</td>
      <td>10진수 → N진수</td>
    </tr>
  </tbody>
</table>

<p><strong>예시</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">decimal</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">binary</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toBInaryString</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">octial</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toOctalString</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">hexa</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toHexaString</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"10진수: "</span> <span class="o">+</span> <span class="n">decimal</span><span class="o">);</span> <span class="c1">// 10</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2진수: "</span> <span class="o">+</span> <span class="n">binary</span><span class="o">);</span>  <span class="c1">// 1010</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"8진수: "</span> <span class="o">+</span> <span class="n">octial</span><span class="o">);</span> <span class="c1">// 12</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"16진수: "</span> <span class="o">+</span> <span class="n">hexa</span><span class="o">);</span> <span class="c1">// a</span>

<span class="cm">/* 비트 연산자로 계산하기 */</span>
<span class="nc">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="mi">10</span> <span class="o">|</span> <span class="mi">12</span><span class="o">);</span> <span class="c1">// 1110</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="2816진수--10진수">2/8/16진수 → 10진수</h2>

<table>
  <thead>
    <tr>
      <th>return type</th>
      <th>class</th>
      <th>method</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>static int</td>
      <td>java.lang.Integer</td>
      <td>parseInt(String s)</td>
      <td>문자열 → 10진수 int (default 10진수)</td>
    </tr>
    <tr>
      <td>static int</td>
      <td>java.lang.Integer</td>
      <td>parseInt(String s, int radix)</td>
      <td>문자열을 변환할 진수(radix)로 읽어 int로 리턴</td>
    </tr>
  </tbody>
</table>

<h2 id="n진수--10진수">N진수 → 10진수</h2>

<table>
  <thead>
    <tr>
      <th>return type</th>
      <th>class</th>
      <th>method</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>static int</td>
      <td>java.lang.Integer</td>
      <td>parseInt(String, s, int radix)</td>
      <td>N진수 → 10진수</td>
    </tr>
  </tbody>
</table>

<p><strong>예시</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">binary</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">"1010"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">octial</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">"12"</span><span class="o">,</span> <span class="mi">8</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">hexa</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="mi">16</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2진수 -&gt; 10진수: "</span> <span class="o">+</span> <span class="n">binary</span><span class="o">);</span> <span class="c1">// 10</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"8진수 -&gt; 10진수: "</span> <span class="o">+</span> <span class="n">octial</span><span class="o">);</span> <span class="c1">// 10</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"16진수 -&gt; 10진수: "</span> <span class="o">+</span> <span class="n">hexa</span><span class="o">);</span> <span class="c1">// 10</span>
</code></pre></div></div>]]></content><author><name>Dajeong Park</name></author><summary type="html"><![CDATA[진수 변환]]></summary></entry><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-string-replacement.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-string-replacement</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-string-replacement.html"><![CDATA[<h1 id="문자열-치환">문자열 치환</h1>

<h2 id="종류">종류</h2>
<ol>
  <li>replace()</li>
  <li>replaceAll()</li>
  <li>replaceFirst()
<br /></li>
</ol>

<h2 id="replacecharsequence-target-charsequence-replacement">replace(CharSequence target, CharSequence replacement)</h2>
<ul>
  <li>일치하는 문자열(target)을 대체할 문자(replacement)로 치환한다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"가/나/다/라/마/바/사"</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"/"</span><span class="o">,</span> <span class="s">","</span><span class="o">));</span> <span class="c1">// 가,나,다,라,마,바,사</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h2 id="replaceallstring-regex-string-replacement">replaceAll(String regex, String replacement)</h2>
<ul>
  <li>일치하는 정규 표현식(regex)을 대체할 문자열(replacement)로 <strong>전부</strong> 치환한다.
    <ul>
      <li>replace()와 유사하지만, <code class="language-plaintext highlighter-rouge">.</code>(온점) 같은 경우 정규 표현식으로 모든 문자를 의미하기 때문에 모든 문자열이 치환될 수 있다.
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"가.나.다.라.마.바.사"</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="s">","</span><span class="o">));</span> <span class="c1">// 가,나,다,라,마,바,사</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="s">","</span><span class="o">));</span> <span class="c1">// ,,,,,,,,,,,,,</span>
</code></pre></div>        </div>
        <p><br /></p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="replacefirststring-target-string-replacement">replaceFirst(String target, String replacement)</h2>
<ul>
  <li>첫번째로 일치하는 문자열(target)를 대체할 문자(replacement)로 치환한다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"가/나/다/라/마/바/사"</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">"/"</span><span class="o">,</span> <span class="s">","</span><span class="o">));</span> <span class="c1">// 가,나/다/라/마/바/사</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<p><strong>실무 사용 예시</strong>
→ 해시태그가 포함되어 있는 내용에 바꾸고 싶은 내용이 해시태그마다 다를 때 사용함</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">contents</span> <span class="o">=</span> <span class="s">"..."</span><span class="o">;</span>
<span class="n">contents</span> <span class="o">=</span> <span class="n">contents</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">"#"</span><span class="o">,</span> <span class="n">str1</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">"#"</span><span class="o">,</span> <span class="n">str2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">"#"</span><span class="o">,</span> <span class="n">str3</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">"#"</span><span class="o">,</span> <span class="n">str4</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">"#"</span><span class="o">,</span> <span class="n">str5</span><span class="o">);</span>
</code></pre></div></div>
<p><br /></p>

<p>참고</p>
<ul>
  <li><a href="https://coding-factory.tistory.com/128">https://coding-factory.tistory.com/128</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-array-slice-method.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-array-slice-method</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-array-slice-method.html"><![CDATA[<h1 id="배열-자르기">배열 자르기</h1>

<h2 id="1-stream의-skip과-limit">1. Stream의 skip과 limit</h2>
<p><strong>Arrays.stream.skip(num)</strong></p>
<ul>
  <li>skip은 숫자(num)만큼 아이템을 건너뛴 다음 그 뒤의 아이템으로 새로운 스트림을 생성한다.
<strong>Arrays.stream.limit(num)</strong></li>
  <li>limit은 지정한 개수(num)만큼 가져와서 새로운 스트림을 리턴한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>

<span class="kt">int</span><span class="o">[]</span> <span class="n">skip</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">array</span><span class="o">)</span>
						<span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
						<span class="o">.</span><span class="na">toArray</span><span class="o">();</span> <span class="c1">// [5, 6, 7, 8, 9, 10]</span>

<span class="kt">int</span><span class="o">[]</span> <span class="n">limit</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">array</span><span class="o">)</span>
							<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
							<span class="o">.</span><span class="na">toArray</span><span class="o">();</span> <span class="c1">// [1, 2, 3, 4]</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="2-copyofrange">2. copyOfRange</h2>
<ul>
  <li>i번째 숫자부터 j번째 숫자까지 자를 때 사용할 수 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span> <span class="c1">// [3, 4, 5]</span>
</code></pre></div></div>]]></content><author><name>Dajeong Park</name></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-cut-string-method.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-cut-string-method</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-cut-string-method.html"><![CDATA[<h1 id="문자열-자르기">문자열 자르기</h1>

<h2 id="1-stringsplit">1. String.split()</h2>
<ul>
  <li>지정한 구분자(정규표현식)로 문자열을 나눠 문자열 배열에 저장한다.</li>
  <li>공백 포함
<br /></li>
</ul>

<h2 id="2-stringtokenizer">2. StringTokenizer</h2>
<ul>
  <li>지정한 구분자(문자열)로 문자열을 나눈다.</li>
  <li>구분자 생략 시 공백이 디폴트</li>
  <li>생성자
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">StringTokenizer</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="c1">// 공백 구분자 사용</span>
<span class="nc">StringTokenizer</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="nc">String</span> <span class="n">delim</span><span class="o">)</span> <span class="c1">// 구분자 지정</span>
<span class="nc">StringTokenizer</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="nc">String</span> <span class="n">delim</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">returnDelims</span><span class="o">)</span> <span class="c1">// 구분자도 토큰에 포함</span>
</code></pre></div>    </div>
  </li>
  <li>메소드
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nextToken</span><span class="o">()</span>     <span class="c1">// 다음 토큰 반환 (이전 토큰은 삭제)</span>
<span class="n">hasMoreTokens</span><span class="o">()</span> <span class="c1">// 리턴할 토큰이 남아있으면 true, 없으면 false</span>
<span class="n">countTokens</span><span class="o">()</span>   <span class="c1">// 남아있는 토큰의 갯수</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
</ul>

<h3 id="공통점">공통점</h3>
<ul>
  <li>지정한 구분자를 통해 문자열을 나눈다.
<br /></li>
</ul>

<h3 id="차이점">차이점</h3>
<p>|  | String.split() | StringTokenizer |
| — | — | — |
| 구분자 | 정규표현식 | 문자/문자열 |
| 빈 문자열 인식 | O | X |
| 결과값 | String[] | StringTokenizer → 반복문으로 출력 가능 |
<br /></p>]]></content><author><name>Dajeong Park</name></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-default-method.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-default-method</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-default-method.html"><![CDATA[<h1 id="default-method">default method</h1>

<h2 id="기존의-인터페이스">기존의 인터페이스</h2>
<p>기존의 인터페이스는 추상 메서드만 존재할 수 있고, 이를 상속 받는 구현체에서 직접 해당 추상 메소드를 구현해야 한다. 
이는 인터페이스에 메서드가 추가되면 그 인터페이스를 상속 받는 모든 구현체 클래스에 추가 메서드를 구현해주어야 하는 문제가 발생한다.
이 경우 <strong>확장(open)은 할 수 있지만, 변경에 대한 폐쇄(close)는 위반했다</strong>고 할 수 있다. (객체 지향의 원칙 중 OCP) 
<strong>새로운 메소드가 인터페이스에 추가된다는 이유로 새로운 메소드를 사용하지 않는 구현체에도 추가적으로 구현을 해야 하기 때문</strong>이다. 즉, 기존의 코드가 변경되어버린다.
<br /></p>

<h2 id="default-method-1">default method</h2>
<p>JAVA 8부터 추가된 default method를 통해 인터페이스에서도 메소드를 구현할 수 있게 되었다.
인터페이스에 default 메소드를 추가해도 구현체에 추가적인 변경을 하지 않기 때문에 <strong>기존 구현체의 코드 변경 없이 확장할 수 있게 된 것</strong> 이다.
<br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TestInterface</span> <span class="o">{</span>
		<span class="kt">void</span> <span class="nf">testAbstractMethod1</span><span class="o">();</span>
		<span class="kt">void</span> <span class="nf">testAbstractMethod2</span><span class="o">();</span>

		<span class="k">default</span> <span class="nc">String</span> <span class="nf">defaultMethod1</span><span class="o">()</span> <span class="o">{</span>
				<span class="c1">// 구현 코드</span>
		<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="추가">추가</h3>
<p>자바 8부터는 이전 버전과는 다르게 추상 클래스를 그렇게 많이 쓰지 않고, 추상 클래스가 하던 일을 많은 부분 인터페이스가 하게 되었기 때문에 정말 필요한 경우가 아니라면 인터페이스에 있는 default 메소드를 사용해서 시도해보는 것이 좋다.
<br />
<br /></p>

<h3 id="참고">참고</h3>
<ul>
  <li><a href="https://velog.io/@heoseungyeon%EB%94%94%ED%8F%B4%ED%8A%B8-%EB%A9%94%EC%84%9C%EB%93%9CDefault-Method">https://velog.io/@heoseungyeon/디폴트-메서드Default-Method</a></li>
  <li><a href="https://www.inflearn.com/course/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/dashboard">https://www.inflearn.com/course/디자인-패턴/dashboard</a>
```</li>
</ul>]]></content><author><name>Dajeong Park</name></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-map-getOrDefault.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-map-getOrDefault</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-map-getOrDefault.html"><![CDATA[<h2 id="map---getordefaultobject-key-v-defaultvalue">Map - getOrDefault(Object key, V defaultValue)</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="no">V</span> <span class="nf">getOrDefault</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">defaultValue</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Node</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">e</span><span class="o">;</span>
		<span class="k">return</span> <span class="o">(</span><span class="n">e</span> <span class="o">=</span> <span class="n">getNode</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">defaultValue</span> <span class="o">:</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>key가 존재하면 key의 value를 반환하고, 없으면 설정한 디폴트 값을 반환한다.
<br /></li>
</ul>

<p><strong>사용 예시 (프로그래머스 level2 위장)</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[][]</span> <span class="n">clothes1</span> <span class="o">=</span> <span class="o">/{/{</span><span class="s">"yellow_hat"</span><span class="o">,</span> <span class="s">"headgear"</span><span class="o">/},</span> 
			<span class="o">/{</span><span class="s">"blue_sunglasses"</span><span class="o">,</span> <span class="s">"eyewear"</span><span class="o">/},</span> 
			<span class="o">/{</span><span class="s">"green_turban"</span><span class="o">,</span> <span class="s">"headgear"</span><span class="o">/}/};</span>
<span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">clothes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">clothes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>HashMap은 동일한 key에 value를 추가할 경우 value가 덮어쓰기 되기 때문에 getOrDefault() 메소드를 사용하여 예시처럼 카운트를 추가하는 등의 방법을 사용할 수 있다.</li>
</ul>]]></content><author><name>Dajeong Park</name></author></entry><entry><title type="html"></title><link href="http://localhost:4000/2023/11/13/2023-11-13-mysql-in.html" rel="alternate" type="text/html" title="" /><published>2023-11-13T17:39:00+09:00</published><updated>2023-11-13T17:39:00+09:00</updated><id>http://localhost:4000/2023/11/13/2023-11-13-mysql-in</id><content type="html" xml:base="http://localhost:4000/2023/11/13/2023-11-13-mysql-in.html"><![CDATA[<h3 id="in">IN</h3>

<h4 id="개념">개념</h4>
<ul>
  <li>여러 값을 OR 관계로 묶어서 나열하는 조건을 WHERE 절에 사용할 때 쓸 수 있는 키워드</li>
  <li>IN 연산자는 조건의 범위를 지정하는 데 사용된다.</li>
  <li>값은 콤마(,)로 구분하여 괄호 내에 묶고, 이 값 중에서 하나 이상과 일치하면 조건에 맞는 것으로 평가된다.
<br /></li>
</ul>

<h4 id="예시">예시</h4>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- OR 조건 표현</span>
<span class="k">where</span> <span class="n">condition</span> <span class="o">=</span> <span class="nv">"A"</span> <span class="k">or</span> <span class="n">condition</span> <span class="o">=</span> <span class="nv">"B"</span><span class="p">;</span>

<span class="c1">-- IN 조건</span>
<span class="k">where</span> <span class="n">condition</span> <span class="k">in</span> <span class="p">(</span><span class="nv">"A"</span><span class="p">,</span> <span class="nv">"B"</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>

<h4 id="장점">장점</h4>
<ul>
  <li>목록에 넣을 값이 여러 개일 때, IN 연산자가 OR 연산자 보다 쓰기도, 보기도, 이해하기도 쉽다.</li>
  <li>IN을 사용하면 조건 순서를 보다 쉽게 관리할 수 있고, 연산자의 수도 줄어든다.</li>
  <li>IN 연산자가 OR 연산자 보다 실행 속도가 빠르다.</li>
  <li>IN 연산자 안에 다른 SELECT문(서브 쿼리)를 넣을 수 있다.
<br /></li>
</ul>

<h5 id="참고">참고</h5>
<ul>
  <li><a href="https://velog.io/@inyong_pang/MySQL-IN-%EC%A1%B0%EA%B1%B4"></a><a href="https://velog.io/@inyong_pang/MySQL-IN-%EC%A1%B0%EA%B1%B4">https://velog.io/@inyong_pang/MySQL-IN-조건</a></li>
</ul>]]></content><author><name>Dajeong Park</name></author></entry><entry><title type="html">every single day</title><link href="http://localhost:4000/blog/2023/11/13/promise.html" rel="alternate" type="text/html" title="every single day" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/blog/2023/11/13/promise</id><content type="html" xml:base="http://localhost:4000/blog/2023/11/13/promise.html"><![CDATA[<p>한동안 쉬었던 블로그를 개편하고 다시 열심히 쌓아보려고 한다..!
열정을 믿지 말고 성실하게 꾸준히 해보자! 파이팅!</p>

<p><br />
<br />
공부 겸 위키용 블로그니까 틀린 부분이 있으면 언제든지 말씀해주세요~!</p>]]></content><author><name>Dajeong Park</name></author><category term="blog" /><category term="다짐" /><summary type="html"><![CDATA[한동안 쉬었던 블로그를 개편하고 다시 열심히 쌓아보려고 한다..! 열정을 믿지 말고 성실하게 꾸준히 해보자! 파이팅!]]></summary></entry><entry><title type="html">Thymeleaf와 @RestController</title><link href="http://localhost:4000/wiki/2023/11/13/thymeleaf-rest-controller.html" rel="alternate" type="text/html" title="Thymeleaf와 @RestController" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/13/thymeleaf-rest-controller</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/13/thymeleaf-rest-controller.html"><![CDATA[<h1 id="thymeleaf와-restcontroller">Thymeleaf와 @RestController</h1>

<h2 id="개요">개요</h2>
<p>테스트를 해보려고 테스트 컨트롤러에 @RestController을 설정한 후 String으로 view 이름을 리턴했더니 화면에 입력한 view 이름이 그대로 나왔다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/sample"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"sample"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="왜-그럴까">왜 그럴까?</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@RestController</code>에는 <code class="language-plaintext highlighter-rouge">@Controller</code> 애노테이션과 <code class="language-plaintext highlighter-rouge">@ResponseBody</code> 애노테이션이 포함되어 있다. Controller에서 페이지 렌더링과 Json 데이터를 함께 리턴해야 할 때 사용한다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Controller</code>는 리턴 값이 String이라면 view 이름으로 인식하여 view를 찾아 렌더링 한다.
    <ul>
      <li>페이지 이동(<code class="language-plaintext highlighter-rouge">@Controller</code>), Json 데이터 리턴(<code class="language-plaintext highlighter-rouge">@ResponseBody</code>)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@ResponseBody</code>: 자바 객체를 HTTP 요청의 body 내용으로 매핑하는 역할을 하는 애노테이션
<br /></li>
</ul>

<h3 id="형태">형태</h3>
<p><code class="language-plaintext highlighter-rouge">@Controller</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Controller</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">@RestController</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="nd">@Controller</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">RestController</span>
</code></pre></div></div>
<p><br /></p>

<h3 id="해결-방법">해결 방법</h3>
<p><code class="language-plaintext highlighter-rouge">ModelAndView</code>를 사용하여 <code class="language-plaintext highlighter-rouge">setViewName()</code>에는 이동할 view 이름, <code class="language-plaintext highlighter-rouge">addObject()</code> 등에는 사용할 변수명을 입력해주면, <code class="language-plaintext highlighter-rouge">@RestController</code>나 <code class="language-plaintext highlighter-rouge">@Controller</code> 애노테이션 둘 다 상관없이 동작한다.</p>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Java" /><category term="Spring" /><category term="Annotation" /><category term="Thymeleaf" /><summary type="html"><![CDATA[Thymeleaf와 @RestController]]></summary></entry><entry><title type="html">Windows 명령어</title><link href="http://localhost:4000/wiki/2023/11/13/windows-command.html" rel="alternate" type="text/html" title="Windows 명령어" /><published>2023-11-13T00:00:00+09:00</published><updated>2023-11-13T00:00:00+09:00</updated><id>http://localhost:4000/wiki/2023/11/13/windows-command</id><content type="html" xml:base="http://localhost:4000/wiki/2023/11/13/windows-command.html"><![CDATA[<h3 id="이동">이동</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="p">[</span><span class="err">이동할</span><span class="w"> </span><span class="err">경로</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="드라이브-변경">드라이브 변경</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="err">드라이브</span><span class="w"> </span><span class="err">문자열</span><span class="p">]:</span><span class="w"> </span><span class="n">//</span><span class="w"> </span><span class="nx">D:</span><span class="w">
</span></code></pre></div></div>

<h3 id="현재-위치의-파일과-폴더-목록-조회">현재 위치의 파일과 폴더 목록 조회</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dir</span><span class="w">
</span></code></pre></div></div>

<h3 id="네트워크-설정-상태-조회">네트워크 설정 상태 조회</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ipconfig</span><span class="w"> 
</span><span class="n">//</span><span class="w"> </span><span class="nx">all</span><span class="w"> </span><span class="err">옵션으로</span><span class="w"> </span><span class="err">상세</span><span class="w"> </span><span class="err">설정</span><span class="w"> </span><span class="err">정보</span><span class="w"> </span><span class="err">보기</span><span class="w"> </span><span class="err">가능</span><span class="w">
</span></code></pre></div></div>

<h3 id="폴더-생성">폴더 생성</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">md</span><span class="p">(</span><span class="n">or</span><span class="w"> </span><span class="nx">mkdir</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="err">폴더명</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="폴더-삭제">폴더 삭제</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rm</span><span class="p">(</span><span class="n">rmdir</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="err">폴더명</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="환경-변수-path-조회">환경 변수 path 조회</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span><span class="w">
</span></code></pre></div></div>

<h3 id="파일-삭제">파일 삭제</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">del</span><span class="w"> </span><span class="p">[</span><span class="err">파일명</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="파일-복사">파일 복사</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">copy</span><span class="w"> </span><span class="p">[</span><span class="err">복사할</span><span class="w"> </span><span class="err">파일명</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="err">복사할</span><span class="w"> </span><span class="err">위치</span><span class="p">]</span><span class="w">
</span><span class="n">xcopy</span><span class="w"> </span><span class="p">[</span><span class="err">복사할</span><span class="w"> </span><span class="err">파일명</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="err">복사할</span><span class="w"> </span><span class="err">위치</span><span class="p">]</span><span class="w"> </span><span class="nx">//</span><span class="w"> </span><span class="err">숨김파일도</span><span class="w"> </span><span class="err">복사</span><span class="w"> </span><span class="err">가능</span><span class="w">
</span></code></pre></div></div>

<h3 id="파일-이동">파일 이동</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">move</span><span class="w"> </span><span class="p">[</span><span class="err">파일명</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="err">이동할</span><span class="w"> </span><span class="err">위치</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="파일명폴더명-변경">파일명/폴더명 변경</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rename</span><span class="w"> </span><span class="p">[</span><span class="err">현재</span><span class="w"> </span><span class="err">파일명</span><span class="n">/</span><span class="err">폴더명</span><span class="p">]</span><span class="w"> </span><span class="p">[</span><span class="err">변경할</span><span class="w"> </span><span class="err">파일명</span><span class="n">/</span><span class="err">폴더명</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="현재-날짜-조회">현재 날짜 조회</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">date</span><span class="w">
</span></code></pre></div></div>

<h3 id="현재-실행-중인-프로세스-모두-조회">현재 실행 중인 프로세스 모두 조회</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tasklist</span><span class="w">
</span></code></pre></div></div>

<h3 id="명령-프롬프트-창-종료">명령 프롬프트 창 종료</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">exit</span><span class="w">
</span></code></pre></div></div>

<h5 id="파일-생성">파일 생성</h5>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">copy</span><span class="w"> </span><span class="nx">con</span><span class="w"> </span><span class="p">[</span><span class="err">생성할</span><span class="w"> </span><span class="err">파일명</span><span class="p">]</span><span class="w">
</span><span class="err">내용</span><span class="w">
</span><span class="n">//</span><span class="w"> </span><span class="err">입력을</span><span class="w"> </span><span class="err">끝내고</span><span class="w"> </span><span class="err">싶으면</span><span class="w"> </span><span class="nx">ctrl</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">z</span><span class="w"> </span><span class="nx">/</span><span class="w"> </span><span class="nx">ctrl</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">c</span><span class="w">
</span></code></pre></div></div>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">echo</span><span class="w"> </span><span class="s2">"내용"</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="s2">"생성할 파일명"</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Dajeong Park</name></author><category term="wiki" /><category term="Windows" /><category term="command" /><summary type="html"><![CDATA[이동 cd [이동할 경로]]]></summary></entry></feed>