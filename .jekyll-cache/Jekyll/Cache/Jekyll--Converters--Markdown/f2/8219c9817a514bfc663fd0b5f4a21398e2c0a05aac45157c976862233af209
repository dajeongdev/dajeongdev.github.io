I"|E<h4 id="배경">배경</h4>
<p>백엔드 개발자에게 API란 무엇일까요. 열심히 설계하고 작성한 코드가 의미가 있으려면, 그걸 받아서 작업하는 프론트 또는 앱 개발자분들에게 잘 전달되어야겠죠. 그렇습니다. API를 잘 작성하는 것도 중요하지만, 그걸 잘 전달하는 것 또한 매우 중요합니다. 그래서 API를 잘 전달하기 위해 API 명세서를 작성하는 방법을 소개해볼까 합니다. 제가 실무에서 작업한 방법을 알려드리는 것이니, 더 좋은 방법이나 틀린 곳이 있다면 언제든지 댓글 부탁드리겠습니다.
<br />
<br /></p>

<h3 id="swagger">Swagger</h3>
<h4 id="swagger란">Swagger란?</h4>

<ul>
  <li>Swagger는 API 명세서(문서)를 자동으로 생성 및 관리하기 위한 도구로, OpenAPI Specification(OAS)를 기반으로 API 설계 및 문서회에 활용할 수 있습니다.</li>
  <li>Swagger의 주요 장점
    <ul>
      <li>개발 속도 향상</li>
      <li>문서와 API 코드 간의 동기화 가능</li>
      <li>Swagger UI로 실시간 API 테스트 가능
<br />
<br /></li>
    </ul>
  </li>
</ul>

<h4 id="swagger-설치-및-설정-방법">Swagger 설치 및 설정 방법</h4>

<p><strong>1. 의존성 추가</strong></p>
<ul>
  <li>Swagger를 사용하기 위해 springdoc-openapi 라이브러리를 설치해주겠습니다.</li>
  <li>springfox는 더이상 지원하지 않으므로 사용을 권장하지 않습니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springdoc</span><span class="o">:</span><span class="n">springdoc</span><span class="o">-</span><span class="n">openapi</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">webmvc</span><span class="o">-</span><span class="nl">ui:</span><span class="mf">2.2</span><span class="o">.</span><span class="mi">0</span><span class="err">'</span>
</code></pre></div></div>

<p><strong>2 Swagger 설정 클래스 추가 (공통)</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@OpenAPIDefinition</span><span class="o">(</span>
        <span class="n">info</span> <span class="o">=</span> <span class="nd">@Info</span><span class="o">(</span>
                <span class="n">title</span> <span class="o">=</span> <span class="s">"Test API Document"</span><span class="o">,</span>
                <span class="n">version</span> <span class="o">=</span> <span class="s">"v1"</span>
        <span class="o">)</span>
<span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">SwaggerConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">OpenAPI</span> <span class="nf">getOpenAPI</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OpenAPI</span><span class="o">()</span>
                <span class="o">.</span><span class="na">components</span><span class="o">(</span><span class="k">new</span> <span class="nc">Components</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>![SwaggerUI_공통설정]<a href="https://github.com/user-attachments/assets/4177ac6b-a378-4143-9a42-bcfb2ff081a5">swagger-1</a></p>

<p><strong>3. 그룹별 Swagger 설정 클래스 추가</strong></p>
<ul>
  <li>그룹별로 API를 나눠서 제공하면 사용자가 보다 편리하게 문서를 이용할 수 있습니다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">UserSwaggerConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="nc">GroupedOpenApi</span> <span class="nf">userDocs</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">GroupedOpenApi</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"고객 API"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">packagesToScan</span><span class="o">(</span><span class="s">"com.test.test.user"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="https://github.com/user-attachments/assets/39bab756-d150-474a-ab4c-1330b385129d" alt="SwaggerUI_그룹설정" />
<br />
<br /></p>

<h4 id="swagger-어노테이션-사용-방법">Swagger 어노테이션 사용 방법</h4>

<p><strong>1. Controller</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Tag</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"고객"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"고객 관련 API입니다."</span><span class="o">)</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/user"</span><span class="o">)</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"summary : 이메일 인증번호 전송"</span><span class="o">,</span>
            <span class="n">description</span> <span class="o">=</span> <span class="s">"""
                    ## 요청 :
                    - String email 이메일 (필수)
                    ## 응답 :
                    - String data "</span><span class="n">success</span><span class="s">"
                    """</span><span class="o">)</span>
    <span class="nd">@BasicApiSwaggerResponse</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/send-email"</span><span class="o">)</span>
    <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CommonResponse</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="nf">sendEmail</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">SendEmailRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">sendEmail</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">CommonResponse</span><span class="o">&lt;&gt;(</span><span class="s">"이메일 인증번호 전송"</span><span class="o">,</span> <span class="nc">MessageConstants</span><span class="o">.</span><span class="na">SUCCESS_MESSAGE</span><span class="o">),</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@Tag: API 그룹 설정
    <ul>
      <li>name: 태그명</li>
      <li>description: 태그에 대한 설명</li>
    </ul>
  </li>
  <li>@Operation: API에 대한 설명
    <ul>
      <li>summary: API 요약</li>
      <li>description: API 상세 설명</li>
    </ul>
  </li>
</ul>

<p><strong>2. Request class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SaveNoticeRequest</span> <span class="o">{</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"language"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"언어"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"ko"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Language</span> <span class="n">language</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"category"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"카테고리"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"공지"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">category</span><span class="o">;</span>
    
    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"title"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"제목"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"제목"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Schema</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"content"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"내용"</span><span class="o">,</span> <span class="n">example</span> <span class="o">=</span> <span class="s">"내용"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@Schema: 해당 Schema에 대한 설명
    <ul>
      <li>name: 스키마 이름</li>
      <li>description: 설명</li>
      <li>example: 예시</li>
    </ul>
  </li>
  <li>@Schema를 작성하여 요청값에 대한 정확한 설명을 적어주면 API 명세서가 더 완성도 있게 작성될 수 있습니다.
    <ul>
      <li>이외에도 allowValues, defaultValue 같은 옵션이 있으니 잘 적용해보면 좋겠습니다.
<br />
<br /></li>
    </ul>
  </li>
</ul>

<h4 id="swagger의-장단점">Swagger의 장단점</h4>
<p><strong>장점</strong></p>
<ol>
  <li>API 문서의 자동화</li>
  <li>협업 및 커뮤니케이션 강화</li>
  <li>실시간 테스트 및 디버깅 가능</li>
</ol>

<p><strong>단점</strong></p>
<ol>
  <li>코드와 문서가 따로 관리될 경우 실제 동작과 불일치 가능</li>
  <li>어노테이션으로 인해 코드 복잡성 증가
<br />
<br /></li>
</ol>

<h4 id="swagger-실무-활용-팁">Swagger 실무 활용 팁</h4>
<p><strong>1. @BasicApiSwaggerResponse 설정</strong>
위의 코드 예제에서 사용한 것처럼  @BasicApiSwaggerResponse 같은 응답 상태 코드를 설명해주는 어노테이션을 만들어두고 사용하면 편리합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">})</span>
<span class="nd">@Documented</span>
<span class="nd">@ApiResponses</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"200"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"API 호출 성공"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"400"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"잘못된 요청"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"404"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"존재하지 않는 API"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"403"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"인가 실패(권한 없음)"</span><span class="o">),</span>
        <span class="nd">@ApiResponse</span><span class="o">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s">"500"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"서버 에러"</span><span class="o">)</span>
<span class="o">})</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">BasicApiSwaggerResponse</span> <span class="o">{}</span>
</code></pre></div></div>

<p><strong>2. JWT 설정</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">SwaggerConfig</span> <span class="o">{</span>

        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">TOKEN_PREFIX</span> <span class="o">=</span> <span class="s">"Bearer"</span><span class="o">;</span>
        
        <span class="nd">@Bean</span>
        <span class="kd">public</span> <span class="nc">OpenAPI</span> <span class="nf">getOpenAPI</span><span class="o">()</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">securityJwt</span> <span class="o">=</span> <span class="s">"JWT"</span><span class="o">;</span>
                <span class="nc">SecurityRequirement</span> <span class="n">securityRequirement</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecurityRequirement</span><span class="o">().</span><span class="na">addList</span><span class="o">(</span><span class="n">securityJwt</span><span class="o">);</span>
                <span class="nc">Components</span> <span class="n">components</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Components</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">addSecuritySchemes</span><span class="o">(</span><span class="n">securityJwt</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SecurityScheme</span><span class="o">()</span>
                                <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">securityJwt</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="nc">SecurityScheme</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">HTTP</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="no">TOKEN_PREFIX</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">bearerFormat</span><span class="o">(</span><span class="nc">HttpHeaders</span><span class="o">.</span><span class="na">AUTHORIZATION</span><span class="o">)</span>
                        <span class="o">);</span>

                <span class="k">return</span> <span class="k">new</span> <span class="nf">OpenAPI</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">addSecurityItem</span><span class="o">(</span><span class="n">securityRequirement</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">components</span><span class="o">(</span><span class="n">components</span><span class="o">);</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET