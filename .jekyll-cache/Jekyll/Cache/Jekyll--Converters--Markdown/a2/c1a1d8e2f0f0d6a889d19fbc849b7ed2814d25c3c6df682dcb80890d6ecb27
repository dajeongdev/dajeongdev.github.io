I"X<ul>
  <li>프로젝트를 서버에 배포해봤다면 번거롭다는 생각을 한번쯤 해봤을 것 같습니다. 그래서 이번에는 그 배포를 자동으로 진행해보겠습니다.</li>
  <li>자동 배포는 Github Actions의 self-hosted runner를 사용했습니다.
<br />
<br /></li>
</ul>

<h4 id="1-프로젝트-리포지토리에서-github-actions-runner-생성하기">1. 프로젝트 리포지토리에서 Github Actions Runner 생성하기</h4>
<ul>
  <li>프로젝트 리포지토리로 이동하여 Settings - Actions - Runners - New self-hosted runner 화면으로 이동합니다.
<img width="1344" alt="github-actions1" src="https://github.com/dajeongdev/dajeongdev.github.io/assets/61612976/c576842e-5e21-4301-a477-b84727d1d967" />
<br />
<br /></li>
</ul>

<h4 id="2-서버에서-명령어-입력하기">2. 서버에서 명령어 입력하기</h4>
<ul>
  <li>서버에 Github Actions runner를 생성해주는 명령어들로 하나씩 차근차근 입력해 줍니다.</li>
  <li>마지막 명령어 실행 중 <strong>Must not run with sudo</strong> 라는 에러 메시지가 발생하면 <code class="language-plaintext highlighter-rouge">export RUNNER_ALLOW_RUNASROOT="1”</code>를 입력한 뒤 재시도하면 됩니다.
<img width="788" alt="github-actions2" src="https://github.com/dajeongdev/dajeongdev.github.io/assets/61612976/43dad816-a9ed-4eaa-b137-d76272e537b6" /></li>
  <li>설치 완료 이후 화면
<img width="671" alt="github-actions3" src="https://github.com/dajeongdev/dajeongdev.github.io/assets/61612976/9bf0bd39-e89e-468b-9755-6debf9c54ac6" /></li>
  <li>이후 아래 명령어를 입력하면 Github Actions를 수신할 준비가 완료됩니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> ./svc.sh <span class="nb">install
sudo</span> ./svc.sh start
</code></pre></div>    </div>
    <p><br />
<br /></p>
  </li>
</ul>

<h4 id="3-리포지토리에서-actons-workflow-생성">3. 리포지토리에서 Actons workflow 생성</h4>
<ul>
  <li>다시 리포지토리로 돌아가서 Actions 탭에서 왼쪽 상단의 New workflow를 클릭한 뒤 저희 프로젝트에 맞는 ‘Java with Gradle’을 선택하여 워크플로우를 생성합니다.</li>
  <li>이 워크플로우가 바로 Github Actions가 서버에서 수행할 업무들입니다.</li>
  <li>이전 페이지(<a href="https://dajeongdev.github.io/wiki/2024/04/29/deploy-project.html">&lt;3&gt; 프로젝트 배포</a>)에서 직접 설치 및 작성한 것과 동일하게 진행합니다.
    <ul>
      <li>JDK 17 설치</li>
      <li>YML 파일 생성</li>
      <li>Gradle 빌드</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name: Auto Deploy

on:
  push:
    branches:
      - develop

<span class="nb">jobs</span>:
  build:

    runs-on: self-hosted

    steps:
      <span class="c"># checkout</span>
      - name: Checkout
        uses: actions/checkout@v4

      <span class="c"># JDK setting</span>
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: <span class="s1">'17'</span>
          distribution: <span class="s1">'zulu'</span>

      <span class="c"># secret yml file 생성</span>
      - name: Set secret yml
        run: |
          <span class="nb">mkdir</span> <span class="nt">-p</span> src/main/resources
          <span class="nb">echo</span> <span class="s2">"$"</span> | <span class="nb">base64</span> <span class="nt">--decode</span> <span class="o">&gt;</span> src/main/resources/application-database.yml
          <span class="nb">echo</span> <span class="s2">"$"</span> | <span class="nb">base64</span> <span class="nt">--decode</span> <span class="o">&gt;</span> src/main/resources/application-naver-token.yml
          <span class="nb">echo</span> <span class="s2">"$"</span> | <span class="nb">base64</span> <span class="nt">--decode</span> <span class="o">&gt;</span> src/main/resources/application-security.yml
          find src
        shell: bash

      <span class="c"># Gradle 권한 부여</span>
      - name: Grant permission <span class="k">for </span>gradlew
        run: <span class="nb">chmod</span> +x ./gradlew

      <span class="c"># 테스트 없이 빌드</span>
      - name: Build with Gradle
        run: ./gradlew clean build <span class="nt">-x</span> <span class="nb">test</span>

      <span class="c"># 포트가 사용 중이라면 종료</span>
      - name: Kill 8009 port <span class="k">if </span>exist
        run: |
            <span class="k">if </span><span class="nb">sudo </span>lsof <span class="nt">-i</span> :8009<span class="p">;</span> <span class="k">then
              </span><span class="nb">echo</span> <span class="s2">"Port 8009 is already in use. Killing the process..."</span>
              <span class="nb">sudo kill</span> <span class="nt">-9</span> <span class="sb">`</span><span class="nb">sudo </span>lsof <span class="nt">-t</span> <span class="nt">-i</span>:8009<span class="sb">`</span>
            <span class="k">fi</span>

      <span class="c"># build/libs 폴더 속 jar 파일 실행</span>
      - name: Execute Jar File
        run: |
          <span class="nb">sudo nohup </span>java <span class="nt">-jar</span> build/libs/americano-0.0.1-SNAPSHOT.jar 1&gt;/root/nohup/output.log 2&gt;/root/nohup/error.log &amp;
          <span class="nb">sleep </span>10
</code></pre></div></div>
<ul>
  <li>secret yml 파일의 경우 별도로 필요한 yml들을 Base64로 인코딩하여 리포지토리 Settings → Secrets and variables → Actions에서 Repository Secrets로 설정해주었습니다.
<img width="1340" alt="github-actions4" src="https://github.com/dajeongdev/dajeongdev.github.io/assets/61612976/f2771b69-b97f-4255-9e94-6e3c1307921d" /></li>
  <li>또한, Github Actions self-hosted runner에서는 nohup이 적용되지 않아 자꾸 <code class="language-plaintext highlighter-rouge">Unable access to jarfile</code>가 발생하여, 결국 이 부분을 제거했더니 성공적으로 실행되었습니다.
    <ul>
      <li><del>nohup이 적용되지 않는 부분은 추후 원인을 찾아내면 꼭 작성해두도록 하겠습니다!</del> <strong>방법을 찾아서 추가하겠습니다. 또한 어이없게도 제가 nohup 이후에 설정한 게 없기 때문에 로그를 확인할 수 없어 필요하기도 했습니다..🥲</strong>
        <ul>
          <li>nohup의 출력은 프로젝트 내에서 권한 밖이기 때문에 발생한 에러라고 확인이 됩니다. 그래서 프로젝트 밖의 경로로 설정하여 표준 출력과 에러를 구분하여 로그를 전달하는 방식으로 스크립트를 추가했습니다.
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 이전
<span class="nb">sudo nohup </span>java <span class="nt">-jar</span> build/libs/americano-0.0.1-SNAPSHOT.jar &amp;
// 현재
 <span class="nb">sudo nohup </span>java <span class="nt">-jar</span> build/libs/americano-0.0.1-SNAPSHOT.jar 1&gt;/root/nohup/output.log 2&gt;/root/nohup/error.log &amp;
</code></pre></div>            </div>
            <p><br />
<br /></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h5 id="참고">참고</h5>
<ul>
  <li>https://e-room.tistory.com/145</li>
  <li>https://be-student.tistory.com/75</li>
  <li><a href="https://velog.io/@bjk1649/github-Action-%EB%A7%8C%EC%9C%BC%EB%A1%9C-%EC%A7%80%EC%86%8D%EC%A0%81-%EB%B0%B0%ED%8F%ACCD-%EB%AA%BB%ED%95%98%EB%82%98">https://velog.io/@bjk1649/github-Action-만으로-지속적-배포CD-못하나</a></li>
  <li>https://green-joo.tistory.com/26</li>
  <li><a href="https://velog.io/@chlee4858/20211205-github%EC%97%90%EC%84%9C-CICD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-github-action">https://velog.io/@chlee4858/20211205-github에서-CICD-적용하기-github-action</a></li>
</ul>
:ET