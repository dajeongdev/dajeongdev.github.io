I"2<h1 id="lru">LRU</h1>
<ul>
  <li>LRU는 가장 오랫동안 참조되지 않은 페이지를 교체하는 방식이다.</li>
  <li>사용된지 가장 오래된 페이지는 앞으로도 사용될 확률이 낮다는 가설에 의해 만들어진 알고리즘이다.
<br /></li>
</ul>

<h2 id="lru의-원리">LRU의 원리</h2>
<ul>
  <li>캐시가 가득 찼을 때, 가장 오랫동안 참조되지 않은 페이지를 찾아서 없애는 방식으로 LRU를 구현할 수 있다.</li>
  <li>페이지를 새로 참조할 때마다 연결리스트의 맨 앞에 페이지 번호를 추가한다. 그러면 맨 뒤에 있는 페이지 번호가 가장 오랫동안 참조되지 않은 페이지 번호가 된다.</li>
  <li>캐시 크기가 3일 때 이미 3개의 페이지가 캐시에 들어있다면, 맨 뒤에 있는 페이지 번호 node를 지우고, 새로운 페이지 번호 node를 앞에 연결해주는 방식이다.</li>
  <li>LRU를 구현할 때는 Doubly Linked List를 사용하고, head에 가까운 노드일 수록 가장 최근에 참조된 페이지, tail에 가까운 node일 수록 가장 오랫동안 참조되지 않은 페이지를 의미한다. LRU의 개념에 따라 캐시 크기를 넘어간다면 tail에 가까운 페이지가 먼저 삭제되도록 한다.
<br /></li>
</ul>

<h2 id="cache-hitmiss">Cache Hit/Miss</h2>
<ul>
  <li><strong>Cache Hit</strong>: CPU가 참고하고자 하는 메모리가 캐시에 존재하고 있을 경우</li>
  <li><strong>Cache Miss</strong>: CPU가 참고하고자 하는 메모리가 캐시에 존재하지 않을 경우
<br /></li>
</ul>

<h2 id="hit-ratiomiss-ratio">Hit Ratio/Miss Ratio</h2>
<ul>
  <li><strong>Hit Ratio</strong>: Cache Hit / (Cache Hit + Cache Miss)</li>
  <li><strong>Miss Ratio</strong>: Cache Miss / (Cache Hit + Cache Miss)
<br /></li>
</ul>
:ET